limits$HM<-df$Head.mass..g.[match(limits$binomial,df$Binomial)]
limits$ES<-df$totalEClength[match(limits$binomial,df$Binomial)]
limits$AR<-df$area_ratio[match(limits$binomial,df$Binomial)]
limits$TMangle<-df$meanTMangle[match(limits$binomial,df$Binomial)]
limits$coloffset<-df$dis_coltip_TMcentroid[match(limits$binomial,df$Binomial)]
limits$ECD<-df$totalECDlength[match(limits$binomial,df$Binomial)]
limits$collength<-df$Columella.length.mm[match(limits$binomial,df$Binomial)]
limits$colvol<-df$Columella.volume.mm3[match(limits$binomial,df$Binomial)]
limits$range<-limits$HighHzlimit-limits$LowHzlimit#hearing range
toPCA<-na.omit(limits[c(1,2,6,7,8:21)])
data <- toPCA[,c(1:4,6:18)]
library(PerformanceAnalytics)
chart.Correlation(data, histogram = TRUE, method = "pearson")
install.packages("PerformanceAnalytics")
chart.Correlation(data, histogram = TRUE, method = "pearson")
library(PerformanceAnalytics)
chart.Correlation(data, histogram = TRUE, method = "pearson")
pca<-prcomp(toPCA[,c(1:4,6:18)], scale. = T)
pcavals<-as.data.frame(pca$x)
pcavals$binomial<-row.names(pcavals)
plot(pcavals$x)
biplot(pca)
library(ggbiplot)
# library(devtools)
# install_github("vqv/ggbiplot")
ggbiplot(pca, obs.scale = 1, var.scale = 1,
circle = TRUE) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')
install.packages("ggbiplot")
ggbiplot(pca, obs.scale = 1, var.scale = 1,
circle = TRUE) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')
library(ggbiplot)
# library(devtools)
# install_github("vqv/ggbiplot")
ggbiplot(pca, obs.scale = 1, var.scale = 1,
circle = TRUE) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')
library(ggbiplot)
# library(devtools)
# install_github("vqv/ggbiplot")
ggbiplot(pca, obs.scale = 1, var.scale = 1,
circle = TRUE) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')
install.packages("ggbiplot")
library(devtools) install_github("vqv/ggbiplot", force = TRUE)
… Read more
library(devtools) install_github("vqv/ggbiplot", force = TRUE)
library(devtools)
install_github("vqv/ggbiplot", force = TRUE)
limits$PCA1<-pcavals$PC1[match(limits$binomial,pcavals$binomial)]
anatlimits<-function(x,y,group){
ggplot(limits, aes_string(x = x, y = y, label = "as.factor(Species)"))+
geom_point()+
geom_smooth(method = "lm")+
theme_classic()+
geom_point()
}
anatlimits_loglog<-function(x,y,group){
ggplot(limits, aes_string(x = x, y = y, label = "as.factor(Species)"))+
geom_point()+
geom_smooth(method = "lm")+
theme_classic()+
scale_x_log10()+
scale_y_log10()+
geom_point()
}
ggarrange(anatlimits("TM","bestsensitivity"),
anatlimits("TMangle","bestsensitivity"),
anatlimits("coloffset","bestsensitivity"),
anatlimits("FP","bestsensitivity"),
anatlimits("RW","bestsensitivity"),
anatlimits("air","bestsensitivity"),
anatlimits("ES","bestsensitivity"),
anatlimits("AR","bestsensitivity"),
anatlimits("ECD","bestsensitivity"),
anatlimits("PCA1","bestsensitivity"),
anatlimits("HM","bestsensitivity"))
ggarrange(anatlimits_loglog("TM","LowHzlimit"),
anatlimits_loglog("TMangle","LowHzlimit"),
anatlimits_loglog("coloffset","LowHzlimit"),
anatlimits_loglog("FP","LowHzlimit"),
anatlimits_loglog("RW","LowHzlimit"),
anatlimits_loglog("air","LowHzlimit"),
anatlimits_loglog("ES","LowHzlimit"),
anatlimits_loglog("AR","LowHzlimit"),
anatlimits_loglog("ECD","LowHzlimit"),
anatlimits_loglog("PCA1","LowHzlimit"),
anatlimits_loglog("HM","LowHzlimit"))
data_model <- toPCA[,c(1:4,6:18)]
lr <- lm(formula = range ~ air + ES + AR + TMangle, data = data_model)
library(MuMIn)
install.packages("MuMIn")
library(MuMIn)
options(na.action = "na.fail")
m_set <- dredge(lr)
m_set
View(m_set)
plot(lr, which = 1)
data_model$res <- residuals(lr)
ggplot(data = data_model, aes(x = res)) +
geom_histogram() +
theme_bw()
plot(lr, which = 2)
data_model$predicted <- predict(lr) # valores predichos del modelo
ggplot(data_model, aes(x = air, y = range)) +
geom_smooth(method = "lm", se = FALSE, color = "lightgrey") + # lÃ­nea de regresiÃ³n
geom_segment(aes(xend = air, yend = predicted), alpha = .2) + # distancia entre observado y predicho
geom_point(aes(color = res)) +  # colorear de acuerdo al tamaÃ±o del residual
scale_color_viridis_c(begin = 0.2, end = 0.8, option = "plasma") +  # nueva escala de colores
# <
geom_point(aes(y = predicted), shape = 1, cex = 0.5) + # dibujar los puntos predichos encima
theme_bw()
pca<-prcomp(toPCA[,c(7:18)], scale. = T)
pcavals<-as.data.frame(pca$x)
data_model <- toPCA[,c(1:4,6:18)]
data_model$PC1 <- pcavals[,1]
# lr <- lm(formula = range ~ TM + TMangle + coloffset + FP + RW + air + ES + AR +
#            ECD + HM + collength + colvol, data = data_model)
# summary(lr) # singularity problems either for linear combinations or too many variables
lr <- lm(formula = bestsensitivity ~ PC1, data = data_model)
summary(lr)
plot(lr, which = 1)
data_model$res <- residuals(lr)
ggplot(data = data_model, aes(x = res)) +
geom_histogram() +
theme_bw()
plot(lr, which = 2)
?geom_boxplot
library(ggplot2)
?geom_boxplot
earm<-read.csv(file.choose())
earm<-read.csv(file.choose())
names(earm)
earm$totalEClength
earm$Binomial[earm$totalEClength=="NA"]
earm$Binomial[which(is.na(earm$totalEClength))]
earm$Code[which(is.na(earm$totalEClength))]
earm$Code[which(is.na(earm$totalECDlength))]
library(ggrepel)
library(ggplot)
library(ggpubr)
#load audiograms
fig1<-read.csv(file.choose(), stringsAsFactors = FALSE)
####################get the high and low Hz limits from a cutoff level##########
splt<-split(fig1,fig1$Species)
#set cutoff for the high and low Hz limits (dB)
cutoff<-35
#create new matrix to populate with data and convert to data audiogramram
limits<-matrix(nrow=length(splt),ncol = 7)
for(i in seq_along(splt)){
audiogram<-data.frame()#
df_audiogram<-as.data.frame(approx(splt[[i]]$Hz,splt[[i]]$Threshold,n = 500))#approx function to interpolate audiogram
df_audiogram
#df_audiogram$y is sound level (dB)
#df_audiogram$x is frequency (Hz)
besthz<-df_audiogram$x[df_audiogram$y==min(df_audiogram$y)]
bestsensitivity<-df_audiogram$y[df_audiogram$y==min(df_audiogram$y)]
#calcualte low Hz limit
if(nrow(df_audiogram[df_audiogram$y>cutoff & df_audiogram$x <besthz,])==0){#if the audiogram does not go above cutoff value, get minimum frequency tested
lowlimit<-min(df_audiogram$x)
}
else{
lowflank<-df_audiogram[df_audiogram$y>cutoff & df_audiogram$x <besthz,]#get frequency where audiogram crosses cutoff value
lowlimit<-max(lowflank$x)#lowhz limit
}
#calculate high Hz limit
if(nrow(df_audiogram[df_audiogram$y>35 & df_audiogram$x >besthz,])==0){# #if the audiogram does not go above cutoff value, get max frequency tested
highlimit<-max(df_audiogram$x)
}
else{
highflank<-df_audiogram[df_audiogram$y>35 & df_audiogram$x >besthz,]#get frequency where audiogram crosses cutoff value
highlimit<-min(highflank$x)#High hz limit
}
limits[i,1]<-lowlimit
limits[i,2]<-highlimit
limits[i,3]<-splt[[i]]$Species[1]
limits[i,4]<-splt[[i]]$group[1]
limits[i,5]<-splt[[i]]$Hz[1]
limits[i,6]<-besthz
limits[i,7]<-bestsensitivity
}
#View(limits)
#convert to dataframe and give column names
limits<-as.data.frame(limits)
colnames(limits)<-c("LowHzlimit","HighHzlimit","Species","supraorder","Hz", "besthz","bestsensitivity")
limits[,1]<-as.numeric(as.character(limits$LowHzlimit))
limits[,2]<-as.numeric(as.character(limits$HighHzlimit))
limits$Hz<-as.numeric(as.character(limits$Hz))
limits$besthz<-as.numeric(as.character(limits$besthz))
limits$bestsensitivity<-as.numeric(as.character(limits$bestsensitivity))
library(ggrepel)
library(ggplot)
library(ggpubr)
#load audiograms
fig1<-read.csv(file.choose(), stringsAsFactors = FALSE)
####################get the high and low Hz limits from a cutoff level##########
splt<-split(fig1,fig1$Species)
#set cutoff for the high and low Hz limits (dB)
cutoff<-35
#create new matrix to populate with data and convert to data audiogramram
limits<-matrix(nrow=length(splt),ncol = 7)
for(i in seq_along(splt)){
audiogram<-data.frame()#
df_audiogram<-as.data.frame(approx(splt[[i]]$Hz,splt[[i]]$Threshold,n = 500))#approx function to interpolate audiogram
df_audiogram
#df_audiogram$y is sound level (dB)
#df_audiogram$x is frequency (Hz)
besthz<-df_audiogram$x[df_audiogram$y==min(df_audiogram$y)]
bestsensitivity<-df_audiogram$y[df_audiogram$y==min(df_audiogram$y)]
#calcualte low Hz limit
if(nrow(df_audiogram[df_audiogram$y>cutoff & df_audiogram$x <besthz,])==0){#if the audiogram does not go above cutoff value, get minimum frequency tested
lowlimit<-min(df_audiogram$x)
}
else{
lowflank<-df_audiogram[df_audiogram$y>cutoff & df_audiogram$x <besthz,]#get frequency where audiogram crosses cutoff value
lowlimit<-max(lowflank$x)#lowhz limit
}
#calculate high Hz limit
if(nrow(df_audiogram[df_audiogram$y>35 & df_audiogram$x >besthz,])==0){# #if the audiogram does not go above cutoff value, get max frequency tested
highlimit<-max(df_audiogram$x)
}
else{
highflank<-df_audiogram[df_audiogram$y>35 & df_audiogram$x >besthz,]#get frequency where audiogram crosses cutoff value
highlimit<-min(highflank$x)#High hz limit
}
limits[i,1]<-lowlimit
limits[i,2]<-highlimit
limits[i,3]<-splt[[i]]$Species[1]
limits[i,4]<-splt[[i]]$group[1]
limits[i,5]<-splt[[i]]$Hz[1]
limits[i,6]<-besthz
limits[i,7]<-bestsensitivity
}
#View(limits)
#convert to dataframe and give column names
limits<-as.data.frame(limits)
colnames(limits)<-c("LowHzlimit","HighHzlimit","Species","supraorder","Hz", "besthz","bestsensitivity")
limits[,1]<-as.numeric(as.character(limits$LowHzlimit))
limits[,2]<-as.numeric(as.character(limits$HighHzlimit))
limits$Hz<-as.numeric(as.character(limits$Hz))
limits$besthz<-as.numeric(as.character(limits$besthz))
limits$bestsensitivity<-as.numeric(as.character(limits$bestsensitivity))
limits$binomial<-NA
limits$binomial[limits$Species=="Barn owl"]<-"Tyto_alba"
limits$binomial[limits$Species=="American kestrel"]<-"Falco_rupicolus" #
limits$binomial[limits$Species=="Budgerigar"]<-"Melopsittacus_undulatus"
limits$binomial[limits$Species=="Canary"]<-"Serinus_canaria"
limits$binomial[limits$Species=="Chicken"]<-"Gallus_domesticus"
limits$binomial[limits$Species=="Cockatiel"]<-"Nymphicus_hollandicus"
limits$binomial[limits$Species=="Eurasian eagle owl"]<-"Bubo_africanus"
limits$binomial[limits$Species=="Eurasian sparrowhawk"]<-"Accipiter_melanoleucus"
limits$binomial[limits$Species=="Great cormorant"]<-"Phalacrocorax_capensis"#
limits$binomial[limits$Species=="Hooded crow"]<-"Corvus_albus"#
limits$binomial[limits$Species=="Indian peafowl"]<-"Pavo_muticus"
limits$binomial[limits$Species=="Mallard duck"]<-"Anas_georgica_georgica"
limits$binomial[limits$Species=="Rock dove"]<-"Columba_livia"#
limits$binomial[limits$Species=="Zebra finch"]<-"Taeniopygia_guttata"
View(limits)
library(ggalt)
library(ggrepel)
scatter<-ggplot(limits, aes(x = HighHzlimit, y = LowHzlimit, label = as.factor(Species)))+
#scale_color_brewer(palette = "Set1")+
geom_text_repel()+
geom_point()+
theme_classic()+
scale_x_log10()+
scale_y_log10()+
#xlim(values = c(2500,10000))+
geom_encircle(aes(fill = as.factor(supraorder)),s_shape=1, expand=0, alpha = 0.5)+#s_shape = 1 and expan = 0 are convex hull
#scale_color_brewer(palette = "Set1")+
geom_point()
scatter
range<-ggplot(limits, aes(x = Hz, y = reorder(Species, LowHzlimit), col= supraorder))+
geom_linerange(aes(x = besthz, xmin = LowHzlimit, xmax = HighHzlimit), size = 3)+
geom_point(aes(x = besthz), size = 3, col = "black")+
scale_color_brewer(palette = "Set1")+
scale_x_log10()+
theme_classic()+
coord_cartesian(clip = "off")+
annotation_logticks(sides = "b", outside = TRUE)+
geom_vline(xintercept = median(limits$LowHzlimit))+
geom_vline(xintercept = min(limits$LowHzlimit))+
geom_vline(xintercept = max(limits$LowHzlimit))+
ylab("Species")+
xlab("Frequency(Hz)")+
theme(legend.position = "none")
range
variation<-ggplot(limitslong,aes(x = reorder(Hzlimittype,-Hzlimitvalue), y = Hzlimitvalue))+
geom_boxplot()+
geom_point(shape = 1, size = 2)+
scale_y_log10()+
theme_classic()+
coord_cartesian(clip = "off")+
annotation_logticks(sides = "l", outside = TRUE)
variation
aa<-ggplot(fig1, aes(x = Hz, y = Threshold, factor = Species))+
geom_line(aes(col = group), size = 2)+
scale_color_brewer(palette = "Set1")+
scale_x_log10()+
geom_hline(yintercept = 35)+
ylab("Threshold (dB SPL)")+
xlab("Frequency (Hz)")+
theme_classic()+
#theme(legend.position = "none")+
coord_cartesian(clip = "off")+
annotation_logticks(sides = "b", outside = TRUE)
aa
aas<-function(d){
set<-fig1[fig1$Species==unique(fig1$Species)[d],]
bestsensitivity<-set$Threshold[set$Threshold==min(set$Threshold)]
bestHz<-set$Hz[set$Threshold==min(set$Threshold)]
highHz<-set$Hz[set$Threshold==min(set$Threshold)]
lowHz<-set$Hz[set$Threshold==min(set$Threshold)]
ggplot(set, aes(x = Hz, y = Threshold, factor = Species))+
geom_line(aes(col = Species), size = 2)+
scale_color_brewer(palette = "Set1")+
geom_hline(yintercept = bestsensitivity)+
geom_hline(yintercept = 35)+
geom_vline(xintercept = bestHz)+
geom_vline(xintercept = 250)+
geom_vline(xintercept = 6029)+
#geom_hline(fig1[fig1$Species==unique(fig1$Species)[d],], yintercept = min(Hz, na.rm = T))+
scale_x_log10()+
theme_classic()+
#theme(legend.position = "none")+
coord_cartesian(clip = "off")+
ylab("Threshold (dB SPL)")+
annotation_logticks(sides = "b", outside = TRUE)
}
aas(4)
aas<-function(d){
set<-fig1[fig1$Species==unique(fig1$Species)[d],]
bestsensitivity<-set$Threshold[set$Threshold==min(set$Threshold)]
bestHz<-set$Hz[set$Threshold==min(set$Threshold)]
highHz<-set$Hz[set$Threshold==min(set$Threshold)]
lowHz<-set$Hz[set$Threshold==min(set$Threshold)]
ggplot(set, aes(x = Hz, y = Threshold, factor = Species))+
geom_line(aes(col = Species), size = 2)+
scale_color_brewer(palette = "Set1")+
geom_hline(yintercept = bestsensitivity)+
geom_hline(yintercept = 35)+
geom_vline(xintercept = bestHz)+
geom_vline(xintercept = 250)+
geom_vline(xintercept = 6029)+
#geom_hline(fig1[fig1$Species==unique(fig1$Species)[d],], yintercept = min(Hz, na.rm = T))+
scale_x_log10()+
theme_bw()+
#theme(legend.position = "none")+
coord_cartesian(clip = "off")+
ylab("Threshold (dB SPL)")+
annotation_logticks(sides = "b", outside = TRUE)
}
aas(4)
aas<-function(d){
set<-fig1[fig1$Species==unique(fig1$Species)[d],]
bestsensitivity<-set$Threshold[set$Threshold==min(set$Threshold)]
bestHz<-set$Hz[set$Threshold==min(set$Threshold)]
highHz<-set$Hz[set$Threshold==min(set$Threshold)]
lowHz<-set$Hz[set$Threshold==min(set$Threshold)]
ggplot(set, aes(x = Hz, y = Threshold, factor = Species))+
geom_line(aes())+
scale_color_brewer(palette = "Set1")+
geom_hline(yintercept = bestsensitivity)+
geom_hline(yintercept = 35)+
geom_vline(xintercept = bestHz)+
geom_vline(xintercept = 250)+
geom_vline(xintercept = 6029)+
#geom_hline(fig1[fig1$Species==unique(fig1$Species)[d],], yintercept = min(Hz, na.rm = T))+
scale_x_log10()+
theme_bw()+
#theme(legend.position = "none")+
coord_cartesian(clip = "off")+
ylab("Threshold (dB SPL)")+
annotation_logticks(sides = "b", outside = TRUE)
}
aas(4)
aas<-function(d){
set<-fig1[fig1$Species==unique(fig1$Species)[d],]
bestsensitivity<-set$Threshold[set$Threshold==min(set$Threshold)]
bestHz<-set$Hz[set$Threshold==min(set$Threshold)]
highHz<-set$Hz[set$Threshold==min(set$Threshold)]
lowHz<-set$Hz[set$Threshold==min(set$Threshold)]
ggplot(set, aes(x = Hz, y = Threshold, factor = Species))+
geom_line(aes(),size = 2)+
scale_color_brewer(palette = "Set1")+
geom_hline(yintercept = bestsensitivity)+
geom_hline(yintercept = 35)+
geom_vline(xintercept = bestHz)+
geom_vline(xintercept = 250)+
geom_vline(xintercept = 6029)+
#geom_hline(fig1[fig1$Species==unique(fig1$Species)[d],], yintercept = min(Hz, na.rm = T))+
scale_x_log10()+
theme_bw()+
#theme(legend.position = "none")+
coord_cartesian(clip = "off")+
ylab("Threshold (dB SPL)")+
annotation_logticks(sides = "b", outside = TRUE)
}
aas(4)
aas(4)+ylim(c(0,80))
aas<-function(d){
set<-fig1[fig1$Species==unique(fig1$Species)[d],]
bestsensitivity<-set$Threshold[set$Threshold==min(set$Threshold)]
bestHz<-set$Hz[set$Threshold==min(set$Threshold)]
highHz<-set$Hz[set$Threshold==min(set$Threshold)]
lowHz<-set$Hz[set$Threshold==min(set$Threshold)]
ggplot(set, aes(x = Hz, y = Threshold, factor = Species))+
geom_line(aes(),size = 2)+
scale_color_brewer(palette = "Set1")+
geom_hline(yintercept = bestsensitivity)+
geom_hline(yintercept = 35)+
geom_vline(xintercept = bestHz)+
geom_vline(xintercept = 250)+
geom_vline(xintercept = 6029)+
#geom_hline(fig1[fig1$Species==unique(fig1$Species)[d],], yintercept = min(Hz, na.rm = T))+
scale_x_log10()+
theme_bw()+
#theme(legend.position = "none")+
coord_cartesian(clip = "off")+
ylab("Threshold (dB SPL)")+
xlab("Frequency (Hz)")
annotation_logticks(sides = "b", outside = TRUE)
}
aas(4)+ylim(c(0,80))
aas(4)+ylim(c(0,80))+
geom_text(aes(x = 250, y = 30, label = "hi"))
?geom_text
aas(4)
aas<-function(d){
set<-fig1[fig1$Species==unique(fig1$Species)[d],]
bestsensitivity<-set$Threshold[set$Threshold==min(set$Threshold)]
bestHz<-set$Hz[set$Threshold==min(set$Threshold)]
highHz<-set$Hz[set$Threshold==min(set$Threshold)]
lowHz<-set$Hz[set$Threshold==min(set$Threshold)]
ggplot(set, aes(x = Hz, y = Threshold, factor = Species))+
geom_line(aes(),size = 2)+
scale_color_brewer(palette = "Set1")+
geom_hline(yintercept = bestsensitivity)+
geom_hline(yintercept = 35)+
geom_vline(xintercept = bestHz)+
geom_vline(xintercept = 250)+
geom_vline(xintercept = 6029)+
#geom_hline(fig1[fig1$Species==unique(fig1$Species)[d],], yintercept = min(Hz, na.rm = T))+
scale_x_log10()+
theme_bw()+
#theme(legend.position = "none")+
coord_cartesian(clip = "off")+
ylab("Threshold (dB SPL)")+
xlab("Frequency (Hz)")+
annotation_logticks(sides = "b", outside = TRUE)
}
aas(4)+ylim(c(0,80))+
geom_text(aes(x = 250, y = 30, label = "hi"))
aas(4)+ylim(c(0,80))+
geom_text(aes(x = 250, y = 30, label = "hi"))
aas(4)+ylim(c(0,80))
?geom_vline
View(convert)
View(AcousticCalcs::convert)
list.dirs("C:/Users/jeffz/Desktop/out/Outputs"")
list.dirs("C:/Users/jeffz/Desktop/out/Outputs")
list.dirs("C:/Users/jeffz/Desktop/out/Outputs")
list.dirs("C:/Users/jeffz/Desktop/out/Outputs", recursive = F)
# import libraries
library(Morpho)#read.mpp function
library(geomorph)#digit curves function
library(rgl)#plotting
getwd()
#set working directory to where the R scripts are located
setwd("C:/Users/jeffz/Desktop/New folder (2)/Ear-measures/Scan_measurements")
inputfolder<-"C:/Users/jeffz/Desktop/New folder"
index<-3# in a set of several specimens at once, all in a subfolder of a main folder. Index indicates which subfolder to process.
ID<-"test2"
source("checkfiles.R")
lengths
repositorypath<-"C:/Users/jeffz/Desktop/New folder (2)/Ear-measures/Scan_measurements"
setwd(repositorypath)
source("run calculations.R")
setwd(repositorypath)
#####################3
#################### CHECK WIREFRAME PLOTS
#plot wireframe diagram of ear based input corrdinates. Will prompt for the 3D *.stl file for the columella
#setwd(paste0(Volume,":/0earmeasures/Scan_measurements/"))
source("plot_ear_auto_STL.R")
Volume<-"C:/Users/jeffz/Desktop/out"# base path for file exporting
dir.create(paste0(Volume,"/Outputs/"))
dir.create(paste0(Volume,"/Outputs/Singlevalues"))
dir.create(paste0(Volume,"/Outputs/TM angles"))
dir.create(paste0(Volume,"/Outputs/Coordinates"))
dir.create(paste0(Volume,"/Outputs/Snapshots"))
dir.create(paste0(Volume,"/Outputs/FCSVs"))
dir.create(paste0(Volume,"/Outputs/STLs"))
ID
outputpathsingles<-paste0(Volume,"/Outputs/Singlevalues/")#calculated values
outputpathangles<-paste0(Volume,"/Outputs/TM angles/")#angles for all
outputpathcoords<-paste0(Volume,"/Outputs/Coordinates/")# all computed coordinates on a single csv file
snapshotpath<-paste0(Volume,"/Outputs/Snapshots/")#directory for wirefram snapshots
outputfcsv<-paste0(Volume,"/Outputs/FCSVs/")
STLpath<-paste0(Volume,"/Outputs/STLs/")
#Save the computations and coordinates
setwd(paste0(Volume,":/0earmeasures/Scan_measurements/"))
source("outputs.R")
ID
setwd(repositorypath)
source("outputs.R")
ID
list.dirs(inputfolder)
