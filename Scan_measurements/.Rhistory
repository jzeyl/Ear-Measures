ID<-d_ID[index]#go through IDs
#list.files(direct)
TM<-list.files(direct, pattern = "TM", recursive = TRUE, full.names = TRUE)
EC<-list.files(direct, pattern = "EC", recursive = TRUE, full.names = TRUE)
FP<-list.files(direct, pattern = "points", recursive = TRUE, full.names = TRUE)
RW<-list.files(direct, pattern = "RW", recursive = TRUE, full.names = TRUE)
CA<-list.files(direct, pattern = "CA", recursive = TRUE, full.names = TRUE)
col<-list.files(direct, pattern = ".stl", recursive = TRUE, full.names = TRUE)
#load coordinate files in this order: TM, EC, FP (pp), RW, CA
TMperimeter<-read.fcsv(TM)
ECpoints<-read.fcsv(EC)
FPperimeter<-read.mpp(FP)#read landmarks from meshlab
RWperimeter<-read.fcsv(RW)
CAperimeter<-read.fcsv(CA)
#convert point curves to equidistance points using digit curves function from geomorph
TMcurve<-as.data.frame(digit.curves(start = TMperimeter[1,], curve = TMperimeter, nPoints = 15, closed = TRUE))#make equidistant points
ECpoints<-as.data.frame(ECpoints)
FPcurve<-as.data.frame(digit.curves(start = FPperimeter[1,], curve = FPperimeter, nPoints = 15, closed = TRUE))#make equidistant points
RWcurve<-as.data.frame(digit.curves(start = RWperimeter[1,], curve = RWperimeter, nPoints = 15, closed = TRUE))#make equidistant points
CAcurve<-as.data.frame(digit.curves(start = CAperimeter[1,], curve = CAperimeter, nPoints = 15, closed = TRUE))#make equidistant points
#run calculation scripts
calculationfiles<-list.files("F:/0earmeasures/Scan_measurements/calculations", pattern = "*.R", full.names = TRUE)#########check dir here
sapply(calculationfiles,source,.GlobalEnv)# run the calculations from the R scripts
#source(calculationfiles[4])
#plot wireframe diagram of ear based input corrdinates. Will prompt for the 3D *.stl file for the columella
setwd("F:/0earmeasures/Scan_measurements/")
source("plot_ear_auto_STL.R")
#set output paths for saving the computed values
outputpathsingles<-"F:/0measure RW,CA/RWCA/Outputs/Singlevalues/"#calculated values
outputpathangles<-"F:/0measure RW,CA/RWCA/Outputs/TM angles/"#angles for all
outputpathcoords<-"F:/0measure RW,CA/RWCA/Outputs/Coordinates/"# all computed coordinates on a single csv file
snapshotpath<-"F:/0measure RW,CA/RWCA/Outputs/Snapshots/"#directory for wirefram snapshots
STLpath<-"F:/0measure RW,CA/RWCA/Outputs/STLs/"
#Save the computations and coordinates
setwd("F:/0earmeasures/Scan_measurements/")
source("outputs.R")
d_ID<-list.dirs("F:/Mar16batch", full.names = FALSE)#list folders with IDs
d_direct<-list.dirs("F:/Mar16batch")#list directories
index<-3
direct<-setwd(d_direct[index])#go through directories
#direct<-setwd(d_direct[index])#go through directories
ID<-d_ID[index]#go through IDs
#list.files(direct)
TM<-list.files(direct, pattern = "TM", recursive = TRUE, full.names = TRUE)
EC<-list.files(direct, pattern = "EC", recursive = TRUE, full.names = TRUE)
FP<-list.files(direct, pattern = "points", recursive = TRUE, full.names = TRUE)
RW<-list.files(direct, pattern = "RW", recursive = TRUE, full.names = TRUE)
CA<-list.files(direct, pattern = "CA", recursive = TRUE, full.names = TRUE)
col<-list.files(direct, pattern = ".stl", recursive = TRUE, full.names = TRUE)
#load coordinate files in this order: TM, EC, FP (pp), RW, CA
TMperimeter<-read.fcsv(TM)
ECpoints<-read.fcsv(EC)
FPperimeter<-read.mpp(FP)#read landmarks from meshlab
RWperimeter<-read.fcsv(RW)
CAperimeter<-read.fcsv(CA)
#convert point curves to equidistance points using digit curves function from geomorph
TMcurve<-as.data.frame(digit.curves(start = TMperimeter[1,], curve = TMperimeter, nPoints = 15, closed = TRUE))#make equidistant points
ECpoints<-as.data.frame(ECpoints)
FPcurve<-as.data.frame(digit.curves(start = FPperimeter[1,], curve = FPperimeter, nPoints = 15, closed = TRUE))#make equidistant points
RWcurve<-as.data.frame(digit.curves(start = RWperimeter[1,], curve = RWperimeter, nPoints = 15, closed = TRUE))#make equidistant points
CAcurve<-as.data.frame(digit.curves(start = CAperimeter[1,], curve = CAperimeter, nPoints = 15, closed = TRUE))#make equidistant points
d_ID<-list.dirs("F:/Mar16batch", full.names = FALSE)#list folders with IDs
d_direct<-list.dirs("F:/Mar16batch")#list directories
index<-3
direct<-setwd(d_direct[index])#go through directories
#direct<-setwd(d_direct[index])#go through directories
ID<-d_ID[index]#go through IDs
d_ID<-list.dirs("F:/Mar16batch", full.names = FALSE)#list folders with IDs
d_direct<-list.dirs("F:/Mar16batch")#list directories
index<-3
direct<-setwd(d_direct[index])#go through directories
#direct<-setwd(d_direct[index])#go through directories
ID<-d_ID[index]#go through IDs
#list.files(direct)
TM<-list.files(direct, pattern = "TM", recursive = TRUE, full.names = TRUE)
EC<-list.files(direct, pattern = "EC", recursive = TRUE, full.names = TRUE)
FP<-list.files(direct, pattern = "points", recursive = TRUE, full.names = TRUE)
RW<-list.files(direct, pattern = "RW", recursive = TRUE, full.names = TRUE)
CA<-list.files(direct, pattern = "CA", recursive = TRUE, full.names = TRUE)
col<-list.files(direct, pattern = ".stl", recursive = TRUE, full.names = TRUE)
#load coordinate files in this order: TM, EC, FP (pp), RW, CA
TMperimeter<-read.fcsv(TM)
ECpoints<-read.fcsv(EC)
FPperimeter<-read.mpp(FP)#read landmarks from meshlab
RWperimeter<-read.fcsv(RW)
CAperimeter<-read.fcsv(CA)
#convert point curves to equidistance points using digit curves function from geomorph
TMcurve<-as.data.frame(digit.curves(start = TMperimeter[1,], curve = TMperimeter, nPoints = 15, closed = TRUE))#make equidistant points
ECpoints<-as.data.frame(ECpoints)
FPcurve<-as.data.frame(digit.curves(start = FPperimeter[1,], curve = FPperimeter, nPoints = 15, closed = TRUE))#make equidistant points
RWcurve<-as.data.frame(digit.curves(start = RWperimeter[1,], curve = RWperimeter, nPoints = 15, closed = TRUE))#make equidistant points
CAcurve<-as.data.frame(digit.curves(start = CAperimeter[1,], curve = CAperimeter, nPoints = 15, closed = TRUE))#make equidistant points
#run calculation scripts
calculationfiles<-list.files("F:/0earmeasures/Scan_measurements/calculations", pattern = "*.R", full.names = TRUE)#########check dir here
sapply(calculationfiles,source,.GlobalEnv)# run the calculations from the R scripts
#source(calculationfiles[4])
#plot wireframe diagram of ear based input corrdinates. Will prompt for the 3D *.stl file for the columella
setwd("F:/0earmeasures/Scan_measurements/")
source("plot_ear_auto_STL.R")
#set output paths for saving the computed values
outputpathsingles<-"F:/0measure RW,CA/RWCA/Outputs/Singlevalues/"#calculated values
outputpathangles<-"F:/0measure RW,CA/RWCA/Outputs/TM angles/"#angles for all
outputpathcoords<-"F:/0measure RW,CA/RWCA/Outputs/Coordinates/"# all computed coordinates on a single csv file
snapshotpath<-"F:/0measure RW,CA/RWCA/Outputs/Snapshots/"#directory for wirefram snapshots
STLpath<-"F:/0measure RW,CA/RWCA/Outputs/STLs/"
#Save the computations and coordinates
setwd("F:/0earmeasures/Scan_measurements/")
source("outputs.R")
d_ID<-list.dirs("F:/Mar16batch", full.names = FALSE)#list folders with IDs
d_direct<-list.dirs("F:/Mar16batch")#list directories
index<-4
direct<-setwd(d_direct[index])#go through directories
#direct<-setwd(d_direct[index])#go through directories
ID<-d_ID[index]#go through IDs
d_ID<-list.dirs("F:/Mar16batch", full.names = FALSE)#list folders with IDs
d_direct<-list.dirs("F:/Mar16batch")#list directories
index<-4
direct<-setwd(d_direct[index])#go through directories
#direct<-setwd(d_direct[index])#go through directories
ID<-d_ID[index]#go through IDs
#list.files(direct)
TM<-list.files(direct, pattern = "TM", recursive = TRUE, full.names = TRUE)
EC<-list.files(direct, pattern = "EC", recursive = TRUE, full.names = TRUE)
FP<-list.files(direct, pattern = "points", recursive = TRUE, full.names = TRUE)
RW<-list.files(direct, pattern = "RW", recursive = TRUE, full.names = TRUE)
CA<-list.files(direct, pattern = "CA", recursive = TRUE, full.names = TRUE)
col<-list.files(direct, pattern = ".stl", recursive = TRUE, full.names = TRUE)
#load coordinate files in this order: TM, EC, FP (pp), RW, CA
TMperimeter<-read.fcsv(TM)
ECpoints<-read.fcsv(EC)
FPperimeter<-read.mpp(FP)#read landmarks from meshlab
RWperimeter<-read.fcsv(RW)
CAperimeter<-read.fcsv(CA)
#convert point curves to equidistance points using digit curves function from geomorph
TMcurve<-as.data.frame(digit.curves(start = TMperimeter[1,], curve = TMperimeter, nPoints = 15, closed = TRUE))#make equidistant points
ECpoints<-as.data.frame(ECpoints)
FPcurve<-as.data.frame(digit.curves(start = FPperimeter[1,], curve = FPperimeter, nPoints = 15, closed = TRUE))#make equidistant points
RWcurve<-as.data.frame(digit.curves(start = RWperimeter[1,], curve = RWperimeter, nPoints = 15, closed = TRUE))#make equidistant points
CAcurve<-as.data.frame(digit.curves(start = CAperimeter[1,], curve = CAperimeter, nPoints = 15, closed = TRUE))#make equidistant points
#run calculation scripts
calculationfiles<-list.files("F:/0earmeasures/Scan_measurements/calculations", pattern = "*.R", full.names = TRUE)#########check dir here
sapply(calculationfiles,source,.GlobalEnv)# run the calculations from the R scripts
#source(calculationfiles[4])
#plot wireframe diagram of ear based input corrdinates. Will prompt for the 3D *.stl file for the columella
setwd("F:/0earmeasures/Scan_measurements/")
source("plot_ear_auto_STL.R")
#set output paths for saving the computed values
outputpathsingles<-"F:/0measure RW,CA/RWCA/Outputs/Singlevalues/"#calculated values
outputpathangles<-"F:/0measure RW,CA/RWCA/Outputs/TM angles/"#angles for all
outputpathcoords<-"F:/0measure RW,CA/RWCA/Outputs/Coordinates/"# all computed coordinates on a single csv file
snapshotpath<-"F:/0measure RW,CA/RWCA/Outputs/Snapshots/"#directory for wirefram snapshots
STLpath<-"F:/0measure RW,CA/RWCA/Outputs/STLs/"
#Save the computations and coordinates
setwd("F:/0earmeasures/Scan_measurements/")
source("outputs.R")
d_ID<-list.dirs("F:/Mar16batch", full.names = FALSE)#list folders with IDs
d_direct<-list.dirs("F:/Mar16batch")#list directories
index<-5
direct<-setwd(d_direct[index])#go through directories
#direct<-setwd(d_direct[index])#go through directories
ID<-d_ID[index]#go through IDs
d_ID<-list.dirs("F:/Mar16batch", full.names = FALSE)#list folders with IDs
d_direct<-list.dirs("F:/Mar16batch")#list directories
index<-5
direct<-setwd(d_direct[index])#go through directories
#direct<-setwd(d_direct[index])#go through directories
ID<-d_ID[index]#go through IDs
#list.files(direct)
TM<-list.files(direct, pattern = "TM", recursive = TRUE, full.names = TRUE)
EC<-list.files(direct, pattern = "EC", recursive = TRUE, full.names = TRUE)
FP<-list.files(direct, pattern = "points", recursive = TRUE, full.names = TRUE)
RW<-list.files(direct, pattern = "RW", recursive = TRUE, full.names = TRUE)
CA<-list.files(direct, pattern = "CA", recursive = TRUE, full.names = TRUE)
col<-list.files(direct, pattern = ".stl", recursive = TRUE, full.names = TRUE)
#load coordinate files in this order: TM, EC, FP (pp), RW, CA
TMperimeter<-read.fcsv(TM)
ECpoints<-read.fcsv(EC)
FPperimeter<-read.mpp(FP)#read landmarks from meshlab
RWperimeter<-read.fcsv(RW)
CAperimeter<-read.fcsv(CA)
#convert point curves to equidistance points using digit curves function from geomorph
TMcurve<-as.data.frame(digit.curves(start = TMperimeter[1,], curve = TMperimeter, nPoints = 15, closed = TRUE))#make equidistant points
ECpoints<-as.data.frame(ECpoints)
FPcurve<-as.data.frame(digit.curves(start = FPperimeter[1,], curve = FPperimeter, nPoints = 15, closed = TRUE))#make equidistant points
RWcurve<-as.data.frame(digit.curves(start = RWperimeter[1,], curve = RWperimeter, nPoints = 15, closed = TRUE))#make equidistant points
CAcurve<-as.data.frame(digit.curves(start = CAperimeter[1,], curve = CAperimeter, nPoints = 15, closed = TRUE))#make equidistant points
#run calculation scripts
calculationfiles<-list.files("F:/0earmeasures/Scan_measurements/calculations", pattern = "*.R", full.names = TRUE)#########check dir here
sapply(calculationfiles,source,.GlobalEnv)# run the calculations from the R scripts
#source(calculationfiles[4])
#plot wireframe diagram of ear based input corrdinates. Will prompt for the 3D *.stl file for the columella
setwd("F:/0earmeasures/Scan_measurements/")
source("plot_ear_auto_STL.R")
#set output paths for saving the computed values
outputpathsingles<-"F:/0measure RW,CA/RWCA/Outputs/Singlevalues/"#calculated values
outputpathangles<-"F:/0measure RW,CA/RWCA/Outputs/TM angles/"#angles for all
outputpathcoords<-"F:/0measure RW,CA/RWCA/Outputs/Coordinates/"# all computed coordinates on a single csv file
snapshotpath<-"F:/0measure RW,CA/RWCA/Outputs/Snapshots/"#directory for wirefram snapshots
STLpath<-"F:/0measure RW,CA/RWCA/Outputs/STLs/"
#Save the computations and coordinates
setwd("F:/0earmeasures/Scan_measurements/")
source("outputs.R")
d_ID<-list.dirs("F:/Mar16batch", full.names = FALSE)#list folders with IDs
d_direct<-list.dirs("F:/Mar16batch")#list directories
index<-6
direct<-setwd(d_direct[index])#go through directories
#direct<-setwd(d_direct[index])#go through directories
ID<-d_ID[index]#go through IDs
d_ID<-list.dirs("F:/Mar16batch", full.names = FALSE)#list folders with IDs
d_direct<-list.dirs("F:/Mar16batch")#list directories
index<-6
direct<-setwd(d_direct[index])#go through directories
#direct<-setwd(d_direct[index])#go through directories
ID<-d_ID[index]#go through IDs
#list.files(direct)
TM<-list.files(direct, pattern = "TM", recursive = TRUE, full.names = TRUE)
EC<-list.files(direct, pattern = "EC", recursive = TRUE, full.names = TRUE)
FP<-list.files(direct, pattern = "points", recursive = TRUE, full.names = TRUE)
RW<-list.files(direct, pattern = "RW", recursive = TRUE, full.names = TRUE)
CA<-list.files(direct, pattern = "CA", recursive = TRUE, full.names = TRUE)
col<-list.files(direct, pattern = ".stl", recursive = TRUE, full.names = TRUE)
#load coordinate files in this order: TM, EC, FP (pp), RW, CA
TMperimeter<-read.fcsv(TM)
ECpoints<-read.fcsv(EC)
FPperimeter<-read.mpp(FP)#read landmarks from meshlab
RWperimeter<-read.fcsv(RW)
CAperimeter<-read.fcsv(CA)
#convert point curves to equidistance points using digit curves function from geomorph
TMcurve<-as.data.frame(digit.curves(start = TMperimeter[1,], curve = TMperimeter, nPoints = 15, closed = TRUE))#make equidistant points
ECpoints<-as.data.frame(ECpoints)
FPcurve<-as.data.frame(digit.curves(start = FPperimeter[1,], curve = FPperimeter, nPoints = 15, closed = TRUE))#make equidistant points
RWcurve<-as.data.frame(digit.curves(start = RWperimeter[1,], curve = RWperimeter, nPoints = 15, closed = TRUE))#make equidistant points
CAcurve<-as.data.frame(digit.curves(start = CAperimeter[1,], curve = CAperimeter, nPoints = 15, closed = TRUE))#make equidistant points
#run calculation scripts
calculationfiles<-list.files("F:/0earmeasures/Scan_measurements/calculations", pattern = "*.R", full.names = TRUE)#########check dir here
sapply(calculationfiles,source,.GlobalEnv)# run the calculations from the R scripts
#source(calculationfiles[4])
#plot wireframe diagram of ear based input corrdinates. Will prompt for the 3D *.stl file for the columella
setwd("F:/0earmeasures/Scan_measurements/")
source("plot_ear_auto_STL.R")
#set output paths for saving the computed values
outputpathsingles<-"F:/0measure RW,CA/RWCA/Outputs/Singlevalues/"#calculated values
outputpathangles<-"F:/0measure RW,CA/RWCA/Outputs/TM angles/"#angles for all
outputpathcoords<-"F:/0measure RW,CA/RWCA/Outputs/Coordinates/"# all computed coordinates on a single csv file
snapshotpath<-"F:/0measure RW,CA/RWCA/Outputs/Snapshots/"#directory for wirefram snapshots
STLpath<-"F:/0measure RW,CA/RWCA/Outputs/STLs/"
#Save the computations and coordinates
setwd("F:/0earmeasures/Scan_measurements/")
source("outputs.R")
d_ID<-list.dirs("F:/Mar16batch", full.names = FALSE)#list folders with IDs
d_direct<-list.dirs("F:/Mar16batch")#list directories
index<-7
direct<-setwd(d_direct[index])#go through directories
#direct<-setwd(d_direct[index])#go through directories
ID<-d_ID[index]#go through IDs
d_ID<-list.dirs("F:/Mar16batch", full.names = FALSE)#list folders with IDs
d_direct<-list.dirs("F:/Mar16batch")#list directories
index<-7
direct<-setwd(d_direct[index])#go through directories
#direct<-setwd(d_direct[index])#go through directories
ID<-d_ID[index]#go through IDs
#list.files(direct)
TM<-list.files(direct, pattern = "TM", recursive = TRUE, full.names = TRUE)
EC<-list.files(direct, pattern = "EC", recursive = TRUE, full.names = TRUE)
FP<-list.files(direct, pattern = "points", recursive = TRUE, full.names = TRUE)
RW<-list.files(direct, pattern = "RW", recursive = TRUE, full.names = TRUE)
CA<-list.files(direct, pattern = "CA", recursive = TRUE, full.names = TRUE)
col<-list.files(direct, pattern = ".stl", recursive = TRUE, full.names = TRUE)
#load coordinate files in this order: TM, EC, FP (pp), RW, CA
TMperimeter<-read.fcsv(TM)
ECpoints<-read.fcsv(EC)
FPperimeter<-read.mpp(FP)#read landmarks from meshlab
RWperimeter<-read.fcsv(RW)
CAperimeter<-read.fcsv(CA)
#convert point curves to equidistance points using digit curves function from geomorph
TMcurve<-as.data.frame(digit.curves(start = TMperimeter[1,], curve = TMperimeter, nPoints = 15, closed = TRUE))#make equidistant points
ECpoints<-as.data.frame(ECpoints)
FPcurve<-as.data.frame(digit.curves(start = FPperimeter[1,], curve = FPperimeter, nPoints = 15, closed = TRUE))#make equidistant points
RWcurve<-as.data.frame(digit.curves(start = RWperimeter[1,], curve = RWperimeter, nPoints = 15, closed = TRUE))#make equidistant points
CAcurve<-as.data.frame(digit.curves(start = CAperimeter[1,], curve = CAperimeter, nPoints = 15, closed = TRUE))#make equidistant points
#run calculation scripts
calculationfiles<-list.files("F:/0earmeasures/Scan_measurements/calculations", pattern = "*.R", full.names = TRUE)#########check dir here
sapply(calculationfiles,source,.GlobalEnv)# run the calculations from the R scripts
#source(calculationfiles[4])
#plot wireframe diagram of ear based input corrdinates. Will prompt for the 3D *.stl file for the columella
setwd("F:/0earmeasures/Scan_measurements/")
source("plot_ear_auto_STL.R")
#set output paths for saving the computed values
outputpathsingles<-"F:/0measure RW,CA/RWCA/Outputs/Singlevalues/"#calculated values
outputpathangles<-"F:/0measure RW,CA/RWCA/Outputs/TM angles/"#angles for all
outputpathcoords<-"F:/0measure RW,CA/RWCA/Outputs/Coordinates/"# all computed coordinates on a single csv file
snapshotpath<-"F:/0measure RW,CA/RWCA/Outputs/Snapshots/"#directory for wirefram snapshots
STLpath<-"F:/0measure RW,CA/RWCA/Outputs/STLs/"
#Save the computations and coordinates
setwd("F:/0earmeasures/Scan_measurements/")
source("outputs.R")
#plot wireframe diagram of ear based input corrdinates. Will prompt for the 3D *.stl file for the columella
setwd("F:/0earmeasures/Scan_measurements/")
source("plot_ear_auto_STL.R")
#set output paths for saving the computed values
outputpathsingles<-"F:/0measure RW,CA/RWCA/Outputs/Singlevalues/"#calculated values
outputpathangles<-"F:/0measure RW,CA/RWCA/Outputs/TM angles/"#angles for all
outputpathcoords<-"F:/0measure RW,CA/RWCA/Outputs/Coordinates/"# all computed coordinates on a single csv file
snapshotpath<-"F:/0measure RW,CA/RWCA/Outputs/Snapshots/"#directory for wirefram snapshots
STLpath<-"F:/0measure RW,CA/RWCA/Outputs/STLs/"
#Save the computations and coordinates
setwd("F:/0earmeasures/Scan_measurements/")
source("outputs.R")
d_ID<-list.dirs("F:/Mar16batch", full.names = FALSE)#list folders with IDs
d_direct<-list.dirs("F:/Mar16batch")#list directories
index<-7
direct<-setwd(d_direct[index])#go through directories
#direct<-setwd(d_direct[index])#go through directories
ID<-d_ID[index]#go through IDs
d_ID<-list.dirs("F:/Mar16batch", full.names = FALSE)#list folders with IDs
d_direct<-list.dirs("F:/Mar16batch")#list directories
index<-7
direct<-setwd(d_direct[index])#go through directories
#direct<-setwd(d_direct[index])#go through directories
ID<-d_ID[index]#go through IDs
FP<-list.files(direct, pattern = "points", recursive = TRUE, full.names = TRUE)
FP
FPperimeter<-read.mpp(FP)#read landmarks from meshlab
FPperimeter
#list.files(direct)
TM<-list.files(direct, pattern = "TM", recursive = TRUE, full.names = TRUE)
EC<-list.files(direct, pattern = "EC", recursive = TRUE, full.names = TRUE)
FP<-list.files(direct, pattern = "points", recursive = TRUE, full.names = TRUE)
RW<-list.files(direct, pattern = "RW", recursive = TRUE, full.names = TRUE)
CA<-list.files(direct, pattern = "CA", recursive = TRUE, full.names = TRUE)
col<-list.files(direct, pattern = ".stl", recursive = TRUE, full.names = TRUE)
#load coordinate files in this order: TM, EC, FP (pp), RW, CA
TMperimeter<-read.fcsv(TM)
ECpoints<-read.fcsv(EC)
FPperimeter<-read.mpp(FP)#read landmarks from meshlab
RWperimeter<-read.fcsv(RW)
CAperimeter<-read.fcsv(CA)
#convert point curves to equidistance points using digit curves function from geomorph
TMcurve<-as.data.frame(digit.curves(start = TMperimeter[1,], curve = TMperimeter, nPoints = 15, closed = TRUE))#make equidistant points
ECpoints<-as.data.frame(ECpoints)
FPcurve<-as.data.frame(digit.curves(start = FPperimeter[1,], curve = FPperimeter, nPoints = 15, closed = TRUE))#make equidistant points
RWcurve<-as.data.frame(digit.curves(start = RWperimeter[1,], curve = RWperimeter, nPoints = 15, closed = TRUE))#make equidistant points
CAcurve<-as.data.frame(digit.curves(start = CAperimeter[1,], curve = CAperimeter, nPoints = 15, closed = TRUE))#make equidistant points
#run calculation scripts
calculationfiles<-list.files("F:/0earmeasures/Scan_measurements/calculations", pattern = "*.R", full.names = TRUE)#########check dir here
sapply(calculationfiles,source,.GlobalEnv)# run the calculations from the R scripts
#source(calculationfiles[4])
#plot wireframe diagram of ear based input corrdinates. Will prompt for the 3D *.stl file for the columella
setwd("F:/0earmeasures/Scan_measurements/")
source("plot_ear_auto_STL.R")
#plot wireframe diagram of ear based input corrdinates. Will prompt for the 3D *.stl file for the columella
setwd("F:/0earmeasures/Scan_measurements/")
source("plot_ear_auto_STL.R")
#set output paths for saving the computed values
outputpathsingles<-"F:/0measure RW,CA/RWCA/Outputs/Singlevalues/"#calculated values
outputpathangles<-"F:/0measure RW,CA/RWCA/Outputs/TM angles/"#angles for all
outputpathcoords<-"F:/0measure RW,CA/RWCA/Outputs/Coordinates/"# all computed coordinates on a single csv file
snapshotpath<-"F:/0measure RW,CA/RWCA/Outputs/Snapshots/"#directory for wirefram snapshots
STLpath<-"F:/0measure RW,CA/RWCA/Outputs/STLs/"
#set output paths for saving the computed values
outputpathsingles<-"F:/0measure RW,CA/RWCA/Outputs/Singlevalues/"#calculated values
outputpathangles<-"F:/0measure RW,CA/RWCA/Outputs/TM angles/"#angles for all
outputpathcoords<-"F:/0measure RW,CA/RWCA/Outputs/Coordinates/"# all computed coordinates on a single csv file
snapshotpath<-"F:/0measure RW,CA/RWCA/Outputs/Snapshots/"#directory for wirefram snapshots
STLpath<-"F:/0measure RW,CA/RWCA/Outputs/STLs/"
#Save the computations and coordinates
setwd("F:/0earmeasures/Scan_measurements/")
source("outputs.R")
####CHECK OUTPUT PATH DRIVE IS GOING TO CORRECT USB/ HARD DRIVE"
#set output paths for saving the computed values
outputpathsingles<-"F:/0measure RW,CA/RWCA/Outputs/Singlevalues/"#calculated values
outputpathangles<-"F:/0measure RW,CA/RWCA/Outputs/TM angles/"#angles for all
outputpathcoords<-"F:/0measure RW,CA/RWCA/Outputs/Coordinates/"# all computed coordinates on a single csv file
snapshotpath<-"F:/0measure RW,CA/RWCA/Outputs/Snapshots/"#directory for wirefram snapshots
STLpath<-"F:/0measure RW,CA/RWCA/Outputs/STLs/"
#Save the computations and coordinates
setwd("F:/0earmeasures/Scan_measurements/")
source("outputs.R")
#run calculation scripts
calculationfiles<-list.files("F:/0earmeasures/Scan_measurements/calculations", pattern = "*.R", full.names = TRUE)#########check dir here
sapply(calculationfiles,source,.GlobalEnv)# run the calculations from the R scripts
#source(calculationfiles[4])
#calculate 3D distance for perimeter
shiftedone<-rbind(FPcurve[2:dim(FPcurve)[1],],FPcurve[1,])# vector shifted by one to measure distance
curveDist<-(FPcurve-shiftedone)^2
totaldistFPcurve<-sqrt(curveDist[,1]+curveDist[,2]+curveDist[,3])
totaldistFPcurve<-as.data.frame(totaldistFPcurve)#final variable
remove(curveDist)
remove(shiftedone)
#Compute centroid of footplate perimeter
FPcentroid<-as.data.frame(cbind(mean(FPcurve[,1]),mean(FPcurve[,2]),mean(FPcurve[,3])))#calculate centroid
#repeat centroid n x length of curve for euclidean distance measurements
FPcentroid<-FPcentroid[rep(seq_len(nrow(FPcentroid)), each=dim(FPcurve)[1]),]
#calculate distance from each perimeter point to centroid
DisttoFPCentroid<-(FPcurve-FPcentroid)^2
totaldisttoFPCentroid<-sqrt(DisttoFPCentroid[,1]+DisttoFPCentroid[,2]+DisttoFPCentroid[,3])
totaldisttoFPCentroid<-as.data.frame(totaldisttoFPCentroid) #final variable
#Shift "distance to centroid"by one element the to get other side of triangle
shiftdisttocentroid<-as.data.frame(totaldisttoFPCentroid[c(2:nrow(totaldisttoFPCentroid)),])
shiftdisttocentroid[nrow(totaldisttoFPCentroid),]<-totaldisttoFPCentroid[1,]
#bind all together into one
lengths<-cbind(totaldistFPcurve,totaldisttoFPCentroid,shiftdisttocentroid)
#Heron's triangle formula:
#s<-(a+b+c)/2
#area<-sqrt(s*(s-a)*(s-b)*(s-c))
s<-(lengths[,1]+lengths[,2]+lengths[,3])/2
areaeachtriangle<-sqrt(s*(s-lengths[,1])*(s-lengths[,2])*(s-lengths[,3]))
areaeachtriangle<-as.data.frame(areaeachtriangle)
FPtotalarea<-sum(areaeachtriangle)
FPcentroidsingle<-as.data.frame(cbind(mean(FPcurve[,1]),mean(FPcurve[,2]),mean(FPcurve[,3])))#calculate centroid
###############plotting#########
#insert centroid every other line for wireframeline plot:
# double all rows
FPcentroiddoubled <- FPcurve[rep(1:nrow(FPcurve),1,each=2),]
# replace all dupliFPtes with blank cells
FPcentroiddoubled[seq(2, dim(FPcentroiddoubled)[1], by=2), ] <- FPcentroid[1,]
FPcentroideveryother<-as.data.frame(FPcentroiddoubled)
#addto original to 'every other' for correct plotting lineplot
fullFP<-rbind(FPcentroideveryother,FPcurve,FPcurve[1,])
FPtotalarea
areaeachtriangle
s
lengths
shiftedone<-rbind(FPcurve[2:dim(FPcurve)[1],],FPcurve[1,])# vector shifted by one to measure distance
shiftedone
d_ID<-list.dirs("F:/Mar16batch", full.names = FALSE)#list folders with IDs
d_direct<-list.dirs("F:/Mar16batch")#list directories
index<-7
direct<-setwd(d_direct[index])#go through directories
#direct<-setwd(d_direct[index])#go through directories
ID<-d_ID[index]#go through IDs
d_ID<-list.dirs("F:/Mar16batch", full.names = FALSE)#list folders with IDs
d_direct<-list.dirs("F:/Mar16batch")#list directories
index<-7
direct<-setwd(d_direct[index])#go through directories
#direct<-setwd(d_direct[index])#go through directories
ID<-d_ID[index]#go through IDs
#list.files(direct)
TM<-list.files(direct, pattern = "TM", recursive = TRUE, full.names = TRUE)
EC<-list.files(direct, pattern = "EC", recursive = TRUE, full.names = TRUE)
FP<-list.files(direct, pattern = "points", recursive = TRUE, full.names = TRUE)
RW<-list.files(direct, pattern = "RW", recursive = TRUE, full.names = TRUE)
CA<-list.files(direct, pattern = "CA", recursive = TRUE, full.names = TRUE)
col<-list.files(direct, pattern = ".stl", recursive = TRUE, full.names = TRUE)
#load coordinate files in this order: TM, EC, FP (pp), RW, CA
TMperimeter<-read.fcsv(TM)
ECpoints<-read.fcsv(EC)
FPperimeter<-read.mpp(FP)#read landmarks from meshlab
RWperimeter<-read.fcsv(RW)
CAperimeter<-read.fcsv(CA)
#convert point curves to equidistance points using digit curves function from geomorph
TMcurve<-as.data.frame(digit.curves(start = TMperimeter[1,], curve = TMperimeter, nPoints = 15, closed = TRUE))#make equidistant points
ECpoints<-as.data.frame(ECpoints)
FPcurve<-as.data.frame(digit.curves(start = FPperimeter[1,], curve = FPperimeter, nPoints = 15, closed = TRUE))#make equidistant points
RWcurve<-as.data.frame(digit.curves(start = RWperimeter[1,], curve = RWperimeter, nPoints = 15, closed = TRUE))#make equidistant points
CAcurve<-as.data.frame(digit.curves(start = CAperimeter[1,], curve = CAperimeter, nPoints = 15, closed = TRUE))#make equidistant points
#run calculation scripts
calculationfiles<-list.files("F:/0earmeasures/Scan_measurements/calculations", pattern = "*.R", full.names = TRUE)#########check dir here
sapply(calculationfiles,source,.GlobalEnv)# run the calculations from the R scripts
#plot wireframe diagram of ear based input corrdinates. Will prompt for the 3D *.stl file for the columella
setwd("F:/0earmeasures/Scan_measurements/")
source("plot_ear_auto_STL.R")
####CHECK OUTPUT PATH DRIVE IS GOING TO CORRECT USB/ HARD DRIVE"
#set output paths for saving the computed values
outputpathsingles<-"F:/0measure RW,CA/RWCA/Outputs/Singlevalues/"#calculated values
outputpathangles<-"F:/0measure RW,CA/RWCA/Outputs/TM angles/"#angles for all
outputpathcoords<-"F:/0measure RW,CA/RWCA/Outputs/Coordinates/"# all computed coordinates on a single csv file
snapshotpath<-"F:/0measure RW,CA/RWCA/Outputs/Snapshots/"#directory for wirefram snapshots
STLpath<-"F:/0measure RW,CA/RWCA/Outputs/STLs/"
#Save the computations and coordinates
setwd("F:/0earmeasures/Scan_measurements/")
source("outputs.R")
####CHECK OUTPUT PATH DRIVE IS GOING TO CORRECT USB/ HARD DRIVE"
#set output paths for saving the computed values
outputpathsingles<-"F:/0measure RW,CA/RWCA/Outputs/Singlevalues/"#calculated values
outputpathangles<-"F:/0measure RW,CA/RWCA/Outputs/TM angles/"#angles for all
outputpathcoords<-"F:/0measure RW,CA/RWCA/Outputs/Coordinates/"# all computed coordinates on a single csv file
snapshotpath<-"F:/0measure RW,CA/RWCA/Outputs/Snapshots/"#directory for wirefram snapshots
STLpath<-"F:/0measure RW,CA/RWCA/Outputs/STLs/"
#Save the computations and coordinates
setwd("F:/0earmeasures/Scan_measurements/")
source("outputs.R")
library(dplyr)
library(readr)
singlevalsdir<-"F:/0measure RW,CA/RWCA/Outputs/Singlevalues/Mar16"
file_names<-list.files(singlevalsdir, full.names = TRUE)
file_names
df<- file_names %>% lapply(read_csv) %>% bind_cols
df
View(df)
library(stringr)
No_x<-str_subset(names(df),c("X"))#columns with X
m<-str_subset(names(df),c("measures"))#columns with variables and IDs repeated
remove<-c(No_x,m)
#clean the dataframe
clean<-df[,setdiff(names(df), remove)]#select dataframe without these columns
clean$measures<-df$measures#add in measures column
View(clean)
clean$measures<-gsub("ADP_01_2019_","",clean$measures)#remove unique ID from column
View(clean)
clean$measures<-gsub("ADP01_2019_","",clean$measures)#remove unique ID from column
clean2<-as.data.frame(t(clean))#transpose
colnames(clean2)<-clean$measures#add column names
clean2<-clean2[-nrow(clean2),]#remove last row
clean2$ID<-row.names(clean2)#switch row names to an ID column
View(clean)
getwd()
write.csv(clean2, "F:/Mar16batch.csv")
df<-read.csv(file.choose())
df<-df[1:119,]
View(df)
dfadding<-read.csv(file.choose())
