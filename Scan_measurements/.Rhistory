#plot wireframe diagram of ear based input corrdinates. Will prompt for the 3D *.stl file for the columella
setwd(paste0(Volume,":/0earmeasures/Scan_measurements/"))
source("plot_ear_auto_STL.R")
outputpathsingles<-paste0(Volume,":/Outputs/Singlevalues/",batch)#calculated values
outputpathangles<-paste0(Volume,":/Outputs/TM angles/")#angles for all
outputpathcoords<-paste0(Volume,":/Outputs/Coordinates/")# all computed coordinates on a single csv file
snapshotpath<-paste0(Volume,":/Outputs/Snapshots/")#directory for wirefram snapshots
outputfcsv<-paste0(Volume,":/Outputs/FCSVs/")
STLpath<-paste0(Volume,":/Outputs/STLs/")
#Save the computations and coordinates
setwd(paste0(Volume,":/0earmeasures/Scan_measurements/"))
source("outputs.R")
ID
#
Volume<- "D"
batch<- "Aug24_2020"
inputfolder<- paste0(Volume,":/Input/",batch)
#dir.create(paste0(Volume,":/Outputs/Singlevalues/",batch))#do only once at beginning
index<-2
for (i in 1:2){
d_ID<-list.dirs(inputfolder, full.names = FALSE)#list folders with specimens
d_direct<-list.dirs(inputfolder)#list folder directories, 1 folder per specimen
direct<-setwd(d_direct[index])#go through directories
ID<-paste0(d_ID[index],"")#go through IDs paste note if necessary
}
#list.files(direct)
TM<-list.files(direct, pattern = " TM.fcsv", recursive = TRUE, full.names = TRUE)
EC<-list.files(direct, pattern = " EC.fcsv", recursive = TRUE, full.names = TRUE)
FP<-list.files(direct, pattern = "points", recursive = TRUE, full.names = TRUE)
RW<-list.files(direct, pattern = "RW.fcsv", recursive = TRUE, full.names = TRUE)
CA<-list.files(direct, pattern = "CA.fcsv", recursive = TRUE, full.names = TRUE)
stl<-list.files(direct, pattern = "stl", recursive = TRUE, full.names = TRUE)
col<-grep("col", stl, value = TRUE)
#check that there is one of each file in the folder
lengths<-c(length(TM),length(EC),length(FP),length(RW),length(CA),length(col))
lengths
#####################################
######################################RUN CALCULATIONS
#load coordinate files in this order: TM, EC, FP (pp), RW, CA
TMperimeter<-read.fcsv(TM)
ECpoints<-read.fcsv(EC)
FPperimeter<-read.mpp(FP)#read landmarks from meshlab
RWperimeter<-read.fcsv(RW)
CAperimeter<-read.fcsv(CA)
#convert point curves to equidistance points using digit curves function from geomorph
TMcurve<-as.data.frame(digit.curves(start = TMperimeter[1,], curve = TMperimeter, nPoints = 15, closed = TRUE))#make equidistant points
ECpoints<-as.data.frame(ECpoints)
FPcurve<-as.data.frame(digit.curves(start = FPperimeter[1,], curve = FPperimeter, nPoints = 15, closed = TRUE))#make equidistant points
RWcurve<-as.data.frame(digit.curves(start = RWperimeter[1,], curve = RWperimeter, nPoints = 15, closed = TRUE))#make equidistant points
CAcurve<-as.data.frame(digit.curves(start = CAperimeter[1,], curve = CAperimeter, nPoints = 15, closed = TRUE))#make equidistant points
#run calculation scripts
calculationfiles<-list.files(paste0(Volume,":/0earmeasures/Scan_measurements/calculations"), pattern = "*.R", full.names = TRUE)#########check dir here
sapply(calculationfiles,source,.GlobalEnv)# run the calculations from the R scripts
#plot wireframe diagram of ear based input corrdinates. Will prompt for the 3D *.stl file for the columella
setwd(paste0(Volume,":/0earmeasures/Scan_measurements/"))
source("plot_ear_auto_STL.R")
####CHECK OUTPUT PATH DRIVE IS GOING TO CORRECT USB/ HARD DRIVE"
#set output paths for saving the computed values
outputpathsingles<-paste0(Volume,":/Outputs/Singlevalues/",batch)#calculated values
outputpathangles<-paste0(Volume,":/Outputs/TM angles/")#angles for all
outputpathcoords<-paste0(Volume,":/Outputs/Coordinates/")# all computed coordinates on a single csv file
snapshotpath<-paste0(Volume,":/Outputs/Snapshots/")#directory for wirefram snapshots
outputfcsv<-paste0(Volume,":/Outputs/FCSVs/")
STLpath<-paste0(Volume,":/Outputs/STLs/")
#Save the computations and coordinates
setwd(paste0(Volume,":/0earmeasures/Scan_measurements/"))
source("outputs.R")
ID
#for (i in seq_along(stl)){
#file.copy(from = stl[i], to = paste0(outputfcsv,ID,"/"))
#}
Volume<- "D"
batch<- "Aug24_2020"
inputfolder<- paste0(Volume,":/Input/",batch)
#dir.create(paste0(Volume,":/Outputs/Singlevalues/",batch))#do only once at beginning
index<-2
for (i in 1:2){
d_ID<-list.dirs(inputfolder, full.names = FALSE)#list folders with specimens
d_direct<-list.dirs(inputfolder)#list folder directories, 1 folder per specimen
direct<-setwd(d_direct[index])#go through directories
ID<-paste0(d_ID[index],"")#go through IDs paste note if necessary
}
#list.files(direct)
TM<-list.files(direct, pattern = " TM.fcsv", recursive = TRUE, full.names = TRUE)
EC<-list.files(direct, pattern = " EC.fcsv", recursive = TRUE, full.names = TRUE)
FP<-list.files(direct, pattern = "points", recursive = TRUE, full.names = TRUE)
RW<-list.files(direct, pattern = "RW.fcsv", recursive = TRUE, full.names = TRUE)
CA<-list.files(direct, pattern = "CA.fcsv", recursive = TRUE, full.names = TRUE)
stl<-list.files(direct, pattern = "stl", recursive = TRUE, full.names = TRUE)
col<-grep("col", stl, value = TRUE)
#check that there is one of each file in the folder
lengths<-c(length(TM),length(EC),length(FP),length(RW),length(CA),length(col))
lengths
#load coordinate files in this order: TM, EC, FP (pp), RW, CA
TMperimeter<-read.fcsv(TM)
ECpoints<-read.fcsv(EC)
FPperimeter<-read.mpp(FP)#read landmarks from meshlab
RWperimeter<-read.fcsv(RW)
CAperimeter<-read.fcsv(CA)
#convert point curves to equidistance points using digit curves function from geomorph
TMcurve<-as.data.frame(digit.curves(start = TMperimeter[1,], curve = TMperimeter, nPoints = 15, closed = TRUE))#make equidistant points
ECpoints<-as.data.frame(ECpoints)
FPcurve<-as.data.frame(digit.curves(start = FPperimeter[1,], curve = FPperimeter, nPoints = 15, closed = TRUE))#make equidistant points
RWcurve<-as.data.frame(digit.curves(start = RWperimeter[1,], curve = RWperimeter, nPoints = 15, closed = TRUE))#make equidistant points
CAcurve<-as.data.frame(digit.curves(start = CAperimeter[1,], curve = CAperimeter, nPoints = 15, closed = TRUE))#make equidistant points
#run calculation scripts
calculationfiles<-list.files(paste0(Volume,":/0earmeasures/Scan_measurements/calculations"), pattern = "*.R", full.names = TRUE)#########check dir here
sapply(calculationfiles,source,.GlobalEnv)# run the calculations from the R scripts
#source(calculationfiles[4])
#################### CHECK WIREFRAME PLOTS
#plot wireframe diagram of ear based input corrdinates. Will prompt for the 3D *.stl file for the columella
setwd(paste0(Volume,":/0earmeasures/Scan_measurements/"))
source("plot_ear_auto_STL.R")
##################EXPORT#############
####CHECK OUTPUT PATH DRIVE IS GOING TO CORRECT USB/ HARD DRIVE"
#set output paths for saving the computed values
outputpathsingles<-paste0(Volume,":/Outputs/Singlevalues/",batch)#calculated values
outputpathangles<-paste0(Volume,":/Outputs/TM angles/")#angles for all
outputpathcoords<-paste0(Volume,":/Outputs/Coordinates/")# all computed coordinates on a single csv file
snapshotpath<-paste0(Volume,":/Outputs/Snapshots/")#directory for wirefram snapshots
outputfcsv<-paste0(Volume,":/Outputs/FCSVs/")
STLpath<-paste0(Volume,":/Outputs/STLs/")
#Save the computations and coordinates
setwd(paste0(Volume,":/0earmeasures/Scan_measurements/"))
source("outputs.R")
ID
#for (i in seq_along(stl)){
#file.copy(from = stl[i], to = paste0(outputfcsv,ID,"/"))
#}
index<-3
for (i in 1:2){
d_ID<-list.dirs(inputfolder, full.names = FALSE)#list folders with specimens
d_direct<-list.dirs(inputfolder)#list folder directories, 1 folder per specimen
direct<-setwd(d_direct[index])#go through directories
ID<-paste0(d_ID[index],"")#go through IDs paste note if necessary
}
#list.files(direct)
TM<-list.files(direct, pattern = " TM.fcsv", recursive = TRUE, full.names = TRUE)
EC<-list.files(direct, pattern = " EC.fcsv", recursive = TRUE, full.names = TRUE)
FP<-list.files(direct, pattern = "points", recursive = TRUE, full.names = TRUE)
RW<-list.files(direct, pattern = "RW.fcsv", recursive = TRUE, full.names = TRUE)
CA<-list.files(direct, pattern = "CA.fcsv", recursive = TRUE, full.names = TRUE)
stl<-list.files(direct, pattern = "stl", recursive = TRUE, full.names = TRUE)
col<-grep("col", stl, value = TRUE)
#check that there is one of each file in the folder
lengths<-c(length(TM),length(EC),length(FP),length(RW),length(CA),length(col))
lengths
#####################################
######################################RUN CALCULATIONS
#load coordinate files in this order: TM, EC, FP (pp), RW, CA
TMperimeter<-read.fcsv(TM)
ECpoints<-read.fcsv(EC)
FPperimeter<-read.mpp(FP)#read landmarks from meshlab
RWperimeter<-read.fcsv(RW)
CAperimeter<-read.fcsv(CA)
#convert point curves to equidistance points using digit curves function from geomorph
TMcurve<-as.data.frame(digit.curves(start = TMperimeter[1,], curve = TMperimeter, nPoints = 15, closed = TRUE))#make equidistant points
ECpoints<-as.data.frame(ECpoints)
FPcurve<-as.data.frame(digit.curves(start = FPperimeter[1,], curve = FPperimeter, nPoints = 15, closed = TRUE))#make equidistant points
RWcurve<-as.data.frame(digit.curves(start = RWperimeter[1,], curve = RWperimeter, nPoints = 15, closed = TRUE))#make equidistant points
CAcurve<-as.data.frame(digit.curves(start = CAperimeter[1,], curve = CAperimeter, nPoints = 15, closed = TRUE))#make equidistant points
#run calculation scripts
calculationfiles<-list.files(paste0(Volume,":/0earmeasures/Scan_measurements/calculations"), pattern = "*.R", full.names = TRUE)#########check dir here
sapply(calculationfiles,source,.GlobalEnv)# run the calculations from the R scripts
#source(calculationfiles[4])
#####################3
#################### CHECK WIREFRAME PLOTS
#plot wireframe diagram of ear based input corrdinates. Will prompt for the 3D *.stl file for the columella
setwd(paste0(Volume,":/0earmeasures/Scan_measurements/"))
source("plot_ear_auto_STL.R")
##################EXPORT#############
####CHECK OUTPUT PATH DRIVE IS GOING TO CORRECT USB/ HARD DRIVE"
#set output paths for saving the computed values
outputpathsingles<-paste0(Volume,":/Outputs/Singlevalues/",batch)#calculated values
outputpathangles<-paste0(Volume,":/Outputs/TM angles/")#angles for all
outputpathcoords<-paste0(Volume,":/Outputs/Coordinates/")# all computed coordinates on a single csv file
snapshotpath<-paste0(Volume,":/Outputs/Snapshots/")#directory for wirefram snapshots
outputfcsv<-paste0(Volume,":/Outputs/FCSVs/")
STLpath<-paste0(Volume,":/Outputs/STLs/")
#Save the computations and coordinates
setwd(paste0(Volume,":/0earmeasures/Scan_measurements/"))
source("outputs.R")
ID
#for (i in seq_along(stl)){
#file.copy(from = stl[i], to = paste0(outputfcsv,ID,"/"))
#}
index<-3
for (i in 1:2){
d_ID<-list.dirs(inputfolder, full.names = FALSE)#list folders with specimens
d_direct<-list.dirs(inputfolder)#list folder directories, 1 folder per specimen
direct<-setwd(d_direct[index])#go through directories
ID<-paste0(d_ID[index],"")#go through IDs paste note if necessary
}
#
Volume<- "D"
batch<- "Aug24_2020"
inputfolder<- paste0(Volume,":/Input/",batch)
#dir.create(paste0(Volume,":/Outputs/Singlevalues/",batch))#do only once at beginning
index<-3
for (i in 1:2){
d_ID<-list.dirs(inputfolder, full.names = FALSE)#list folders with specimens
d_direct<-list.dirs(inputfolder)#list folder directories, 1 folder per specimen
direct<-setwd(d_direct[index])#go through directories
ID<-paste0(d_ID[index],"")#go through IDs paste note if necessary
}
#list.files(direct)
TM<-list.files(direct, pattern = " TM.fcsv", recursive = TRUE, full.names = TRUE)
EC<-list.files(direct, pattern = " EC.fcsv", recursive = TRUE, full.names = TRUE)
FP<-list.files(direct, pattern = "points", recursive = TRUE, full.names = TRUE)
RW<-list.files(direct, pattern = "RW.fcsv", recursive = TRUE, full.names = TRUE)
CA<-list.files(direct, pattern = "CA.fcsv", recursive = TRUE, full.names = TRUE)
stl<-list.files(direct, pattern = "stl", recursive = TRUE, full.names = TRUE)
col<-grep("col", stl, value = TRUE)
#check that there is one of each file in the folder
lengths<-c(length(TM),length(EC),length(FP),length(RW),length(CA),length(col))
lengths
#####################################
######################################RUN CALCULATIONS
#load coordinate files in this order: TM, EC, FP (pp), RW, CA
TMperimeter<-read.fcsv(TM)
ECpoints<-read.fcsv(EC)
FPperimeter<-read.mpp(FP)#read landmarks from meshlab
RWperimeter<-read.fcsv(RW)
CAperimeter<-read.fcsv(CA)
#convert point curves to equidistance points using digit curves function from geomorph
TMcurve<-as.data.frame(digit.curves(start = TMperimeter[1,], curve = TMperimeter, nPoints = 15, closed = TRUE))#make equidistant points
ECpoints<-as.data.frame(ECpoints)
FPcurve<-as.data.frame(digit.curves(start = FPperimeter[1,], curve = FPperimeter, nPoints = 15, closed = TRUE))#make equidistant points
RWcurve<-as.data.frame(digit.curves(start = RWperimeter[1,], curve = RWperimeter, nPoints = 15, closed = TRUE))#make equidistant points
CAcurve<-as.data.frame(digit.curves(start = CAperimeter[1,], curve = CAperimeter, nPoints = 15, closed = TRUE))#make equidistant points
#run calculation scripts
calculationfiles<-list.files(paste0(Volume,":/0earmeasures/Scan_measurements/calculations"), pattern = "*.R", full.names = TRUE)#########check dir here
sapply(calculationfiles,source,.GlobalEnv)# run the calculations from the R scripts
#source(calculationfiles[4])
#####################3
#################### CHECK WIREFRAME PLOTS
#plot wireframe diagram of ear based input corrdinates. Will prompt for the 3D *.stl file for the columella
setwd(paste0(Volume,":/0earmeasures/Scan_measurements/"))
source("plot_ear_auto_STL.R")
##################EXPORT#############
####CHECK OUTPUT PATH DRIVE IS GOING TO CORRECT USB/ HARD DRIVE"
#set output paths for saving the computed values
outputpathsingles<-paste0(Volume,":/Outputs/Singlevalues/",batch)#calculated values
outputpathangles<-paste0(Volume,":/Outputs/TM angles/")#angles for all
outputpathcoords<-paste0(Volume,":/Outputs/Coordinates/")# all computed coordinates on a single csv file
snapshotpath<-paste0(Volume,":/Outputs/Snapshots/")#directory for wirefram snapshots
outputfcsv<-paste0(Volume,":/Outputs/FCSVs/")
STLpath<-paste0(Volume,":/Outputs/STLs/")
#Save the computations and coordinates
setwd(paste0(Volume,":/0earmeasures/Scan_measurements/"))
source("outputs.R")
ID
#for (i in seq_along(stl)){
#file.copy(from = stl[i], to = paste0(outputfcsv,ID,"/"))
#}
Volume<- "D"
batch<- "Aug24_2020"
inputfolder<- paste0(Volume,":/Input/",batch)
#dir.create(paste0(Volume,":/Outputs/Singlevalues/",batch))#do only once at beginning
index<-4
for (i in 1:2){
d_ID<-list.dirs(inputfolder, full.names = FALSE)#list folders with specimens
d_direct<-list.dirs(inputfolder)#list folder directories, 1 folder per specimen
direct<-setwd(d_direct[index])#go through directories
ID<-paste0(d_ID[index],"")#go through IDs paste note if necessary
}
#list.files(direct)
TM<-list.files(direct, pattern = " TM.fcsv", recursive = TRUE, full.names = TRUE)
EC<-list.files(direct, pattern = " EC.fcsv", recursive = TRUE, full.names = TRUE)
FP<-list.files(direct, pattern = "points", recursive = TRUE, full.names = TRUE)
RW<-list.files(direct, pattern = "RW.fcsv", recursive = TRUE, full.names = TRUE)
CA<-list.files(direct, pattern = "CA.fcsv", recursive = TRUE, full.names = TRUE)
stl<-list.files(direct, pattern = "stl", recursive = TRUE, full.names = TRUE)
col<-grep("col", stl, value = TRUE)
#check that there is one of each file in the folder
lengths<-c(length(TM),length(EC),length(FP),length(RW),length(CA),length(col))
lengths
#####################################
######################################RUN CALCULATIONS
#load coordinate files in this order: TM, EC, FP (pp), RW, CA
TMperimeter<-read.fcsv(TM)
ECpoints<-read.fcsv(EC)
FPperimeter<-read.mpp(FP)#read landmarks from meshlab
RWperimeter<-read.fcsv(RW)
CAperimeter<-read.fcsv(CA)
#convert point curves to equidistance points using digit curves function from geomorph
TMcurve<-as.data.frame(digit.curves(start = TMperimeter[1,], curve = TMperimeter, nPoints = 15, closed = TRUE))#make equidistant points
ECpoints<-as.data.frame(ECpoints)
FPcurve<-as.data.frame(digit.curves(start = FPperimeter[1,], curve = FPperimeter, nPoints = 15, closed = TRUE))#make equidistant points
RWcurve<-as.data.frame(digit.curves(start = RWperimeter[1,], curve = RWperimeter, nPoints = 15, closed = TRUE))#make equidistant points
CAcurve<-as.data.frame(digit.curves(start = CAperimeter[1,], curve = CAperimeter, nPoints = 15, closed = TRUE))#make equidistant points
#run calculation scripts
calculationfiles<-list.files(paste0(Volume,":/0earmeasures/Scan_measurements/calculations"), pattern = "*.R", full.names = TRUE)#########check dir here
sapply(calculationfiles,source,.GlobalEnv)# run the calculations from the R scripts
#source(calculationfiles[4])
#####################3
#################### CHECK WIREFRAME PLOTS
#plot wireframe diagram of ear based input corrdinates. Will prompt for the 3D *.stl file for the columella
setwd(paste0(Volume,":/0earmeasures/Scan_measurements/"))
source("plot_ear_auto_STL.R")
##################EXPORT#############
####CHECK OUTPUT PATH DRIVE IS GOING TO CORRECT USB/ HARD DRIVE"
#set output paths for saving the computed values
outputpathsingles<-paste0(Volume,":/Outputs/Singlevalues/",batch)#calculated values
outputpathangles<-paste0(Volume,":/Outputs/TM angles/")#angles for all
outputpathcoords<-paste0(Volume,":/Outputs/Coordinates/")# all computed coordinates on a single csv file
snapshotpath<-paste0(Volume,":/Outputs/Snapshots/")#directory for wirefram snapshots
outputfcsv<-paste0(Volume,":/Outputs/FCSVs/")
STLpath<-paste0(Volume,":/Outputs/STLs/")
#Save the computations and coordinates
setwd(paste0(Volume,":/0earmeasures/Scan_measurements/"))
source("outputs.R")
ID
#for (i in seq_along(stl)){
#file.copy(from = stl[i], to = paste0(outputfcsv,ID,"/"))
#}
Volume<- "D"
batch<- "Aug24_2020"
inputfolder<- paste0(Volume,":/Input/",batch)
#dir.create(paste0(Volume,":/Outputs/Singlevalues/",batch))#do only once at beginning
index<-5
for (i in 1:2){
d_ID<-list.dirs(inputfolder, full.names = FALSE)#list folders with specimens
d_direct<-list.dirs(inputfolder)#list folder directories, 1 folder per specimen
direct<-setwd(d_direct[index])#go through directories
ID<-paste0(d_ID[index],"")#go through IDs paste note if necessary
}
#list.files(direct)
TM<-list.files(direct, pattern = " TM.fcsv", recursive = TRUE, full.names = TRUE)
EC<-list.files(direct, pattern = " EC.fcsv", recursive = TRUE, full.names = TRUE)
FP<-list.files(direct, pattern = "points", recursive = TRUE, full.names = TRUE)
RW<-list.files(direct, pattern = "RW.fcsv", recursive = TRUE, full.names = TRUE)
CA<-list.files(direct, pattern = "CA.fcsv", recursive = TRUE, full.names = TRUE)
stl<-list.files(direct, pattern = "stl", recursive = TRUE, full.names = TRUE)
col<-grep("col", stl, value = TRUE)
#check that there is one of each file in the folder
lengths<-c(length(TM),length(EC),length(FP),length(RW),length(CA),length(col))
lengths
#####################################
######################################RUN CALCULATIONS
#load coordinate files in this order: TM, EC, FP (pp), RW, CA
TMperimeter<-read.fcsv(TM)
ECpoints<-read.fcsv(EC)
FPperimeter<-read.mpp(FP)#read landmarks from meshlab
RWperimeter<-read.fcsv(RW)
CAperimeter<-read.fcsv(CA)
#convert point curves to equidistance points using digit curves function from geomorph
TMcurve<-as.data.frame(digit.curves(start = TMperimeter[1,], curve = TMperimeter, nPoints = 15, closed = TRUE))#make equidistant points
ECpoints<-as.data.frame(ECpoints)
FPcurve<-as.data.frame(digit.curves(start = FPperimeter[1,], curve = FPperimeter, nPoints = 15, closed = TRUE))#make equidistant points
RWcurve<-as.data.frame(digit.curves(start = RWperimeter[1,], curve = RWperimeter, nPoints = 15, closed = TRUE))#make equidistant points
CAcurve<-as.data.frame(digit.curves(start = CAperimeter[1,], curve = CAperimeter, nPoints = 15, closed = TRUE))#make equidistant points
#run calculation scripts
calculationfiles<-list.files(paste0(Volume,":/0earmeasures/Scan_measurements/calculations"), pattern = "*.R", full.names = TRUE)#########check dir here
sapply(calculationfiles,source,.GlobalEnv)# run the calculations from the R scripts
#source(calculationfiles[4])
#####################3
#################### CHECK WIREFRAME PLOTS
#plot wireframe diagram of ear based input corrdinates. Will prompt for the 3D *.stl file for the columella
setwd(paste0(Volume,":/0earmeasures/Scan_measurements/"))
source("plot_ear_auto_STL.R")
##################EXPORT#############
####CHECK OUTPUT PATH DRIVE IS GOING TO CORRECT USB/ HARD DRIVE"
#set output paths for saving the computed values
outputpathsingles<-paste0(Volume,":/Outputs/Singlevalues/",batch)#calculated values
outputpathangles<-paste0(Volume,":/Outputs/TM angles/")#angles for all
outputpathcoords<-paste0(Volume,":/Outputs/Coordinates/")# all computed coordinates on a single csv file
snapshotpath<-paste0(Volume,":/Outputs/Snapshots/")#directory for wirefram snapshots
outputfcsv<-paste0(Volume,":/Outputs/FCSVs/")
STLpath<-paste0(Volume,":/Outputs/STLs/")
#Save the computations and coordinates
setwd(paste0(Volume,":/0earmeasures/Scan_measurements/"))
source("outputs.R")
ID
#for (i in seq_along(stl)){
#file.copy(from = stl[i], to = paste0(outputfcsv,ID,"/"))
#}
Volume<- "D"
batch<- "Aug24_2020"
inputfolder<- paste0(Volume,":/Input/",batch)
#dir.create(paste0(Volume,":/Outputs/Singlevalues/",batch))#do only once at beginning
index<-6
for (i in 1:2){
d_ID<-list.dirs(inputfolder, full.names = FALSE)#list folders with specimens
d_direct<-list.dirs(inputfolder)#list folder directories, 1 folder per specimen
direct<-setwd(d_direct[index])#go through directories
ID<-paste0(d_ID[index],"")#go through IDs paste note if necessary
}
#list.files(direct)
TM<-list.files(direct, pattern = " TM.fcsv", recursive = TRUE, full.names = TRUE)
EC<-list.files(direct, pattern = " EC.fcsv", recursive = TRUE, full.names = TRUE)
FP<-list.files(direct, pattern = "points", recursive = TRUE, full.names = TRUE)
RW<-list.files(direct, pattern = "RW.fcsv", recursive = TRUE, full.names = TRUE)
CA<-list.files(direct, pattern = "CA.fcsv", recursive = TRUE, full.names = TRUE)
stl<-list.files(direct, pattern = "stl", recursive = TRUE, full.names = TRUE)
col<-grep("col", stl, value = TRUE)
#check that there is one of each file in the folder
lengths<-c(length(TM),length(EC),length(FP),length(RW),length(CA),length(col))
lengths
#####################################
######################################RUN CALCULATIONS
#load coordinate files in this order: TM, EC, FP (pp), RW, CA
TMperimeter<-read.fcsv(TM)
ECpoints<-read.fcsv(EC)
FPperimeter<-read.mpp(FP)#read landmarks from meshlab
RWperimeter<-read.fcsv(RW)
CAperimeter<-read.fcsv(CA)
#convert point curves to equidistance points using digit curves function from geomorph
TMcurve<-as.data.frame(digit.curves(start = TMperimeter[1,], curve = TMperimeter, nPoints = 15, closed = TRUE))#make equidistant points
ECpoints<-as.data.frame(ECpoints)
FPcurve<-as.data.frame(digit.curves(start = FPperimeter[1,], curve = FPperimeter, nPoints = 15, closed = TRUE))#make equidistant points
RWcurve<-as.data.frame(digit.curves(start = RWperimeter[1,], curve = RWperimeter, nPoints = 15, closed = TRUE))#make equidistant points
CAcurve<-as.data.frame(digit.curves(start = CAperimeter[1,], curve = CAperimeter, nPoints = 15, closed = TRUE))#make equidistant points
#run calculation scripts
calculationfiles<-list.files(paste0(Volume,":/0earmeasures/Scan_measurements/calculations"), pattern = "*.R", full.names = TRUE)#########check dir here
sapply(calculationfiles,source,.GlobalEnv)# run the calculations from the R scripts
#source(calculationfiles[4])
#####################3
#################### CHECK WIREFRAME PLOTS
#plot wireframe diagram of ear based input corrdinates. Will prompt for the 3D *.stl file for the columella
setwd(paste0(Volume,":/0earmeasures/Scan_measurements/"))
source("plot_ear_auto_STL.R")
##################EXPORT#############
####CHECK OUTPUT PATH DRIVE IS GOING TO CORRECT USB/ HARD DRIVE"
#set output paths for saving the computed values
outputpathsingles<-paste0(Volume,":/Outputs/Singlevalues/",batch)#calculated values
outputpathangles<-paste0(Volume,":/Outputs/TM angles/")#angles for all
outputpathcoords<-paste0(Volume,":/Outputs/Coordinates/")# all computed coordinates on a single csv file
snapshotpath<-paste0(Volume,":/Outputs/Snapshots/")#directory for wirefram snapshots
outputfcsv<-paste0(Volume,":/Outputs/FCSVs/")
STLpath<-paste0(Volume,":/Outputs/STLs/")
#Save the computations and coordinates
setwd(paste0(Volume,":/0earmeasures/Scan_measurements/"))
source("outputs.R")
ID
#for (i in seq_along(stl)){
#file.copy(from = stl[i], to = paste0(outputfcsv,ID,"/"))
#}
library(dplyr)
library(readr)
Volume<-"E"
folder<- "Aug24_2020"#folder to be created in the out
singlevalsdir<-paste0(Volume, ":/Outputs/Singlevalues/",folder)
file_names<-list.files(singlevalsdir, full.names = TRUE)
#read files and bind together into single datafrmae
df<- file_names %>% lapply(read_csv) %>% bind_cols
dir.create(paste0(Volume, ":/Outputs/Singlevalues/",folder))
Volume<-"D"
folder<- "Aug24_2020"#folder to be created in the out
dir.create(paste0(Volume, ":/Outputs/Singlevalues/",folder))
singlevalsdir<-paste0(Volume, ":/Outputs/Singlevalues/",folder)
file_names<-list.files(singlevalsdir, full.names = TRUE)
file_names
df<- file_names %>% lapply(read_csv) %>% bind_cols
View(df)
library(stringr)
#name the unnecessary columns
No_x<-str_subset(names(df),c("X"))#list columns with X
m<-str_subset(names(df),c("measures"))#columns with variables and IDs repeated
remove<-c(No_x,m)#list of names of redundant columns to remove
#clean the dataframe
clean<-df[,setdiff(names(df), remove)]#select dataframe columns lacking those redundant columnswithout these columns
clean$measures<-df$measures#add in measures column
View(clean)
clean$measures<-gsub("2020","",clean$measures)#remove unique ID from column
No_x<-str_subset(names(df),c("X"))#list columns with X
m<-str_subset(names(df),c("measures"))#columns with variables and IDs repeated
m
remove<-c(No_x,m)#list of names of redundant columns to remove
clean<-df[,setdiff(names(df), remove)]#select dataframe columns lacking those redundant columnswithout these columns
clean$measures<-df$measures#add in measures column
View(clean)
m
View(df)
clean<-df[,setdiff(names(df), remove)]#select dataframe columns lacking those redundant columnswithout these columns
View(clean)
View(df)
df[,setdiff(names(df), remove)]
m
m
m[1]
View(df)
2:length(m)
remove<-c(No_x,m[2:length(m)])#list of names of redundant columns to remove
clean<-df[,setdiff(names(df), remove)]#select dataframe columns lacking those redundant columnswithout these columns
View(clean)
df$measures
names(df)
clean$measures<-df$measures...2#add in measures column
View(clean)
clean$measures<-gsub("FE_","",clean$measures)#remove unique ID from column
clean2<-as.data.frame(t(clean))#transpose
colnames(clean2)<-clean$measures#add column names
clean2<-clean2[-nrow(clean2),]#remove last row
clean2$ID<-row.names(clean2)#switch row names to an ID column
#clean2$ID<-gsub("Correct","",clean2$ID)
View(clean2)
No_x<-str_subset(names(df),c("X"))#list columns with X
m<-str_subset(names(df),c("measures"))#columns with variables and IDs repeated
remove<-c(No_x,m)#list of names of redundant columns to remove
#clean the dataframe
clean<-df[,setdiff(names(df), remove)]#select dataframe columns lacking those redundant columnswithout these columns
clean$measures<-df$measures...2#add in measures column
View(clean)
clean$measures<-gsub("FE_","",clean$measures)#remove unique ID from column
clean2<-as.data.frame(t(clean))#transpose
colnames(clean2)<-clean$measures#add column names
clean2<-clean2[-nrow(clean2),]#remove last row
clean2$ID<-row.names(clean2)#switch row names to an ID column
#clean2$ID<-gsub("Correct","",clean2$ID)
View(clean2)
write.csv(clean2, paste0(Volume,":/singledfsinglevals/",folder,".csv"))
