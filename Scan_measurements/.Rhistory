limits[i,5]<-splt[[i]]$Hz[1]
limits[i,6]<-besthz
limits[i,7]<-bestsensitivity
}
#View(limits)
#convert to dataframe and give column names
limits<-as.data.frame(limits)
colnames(limits)<-c("LowHzlimit","HighHzlimit","Species","supraorder","Hz", "besthz","bestsensitivity")
limits[,1]<-as.numeric(as.character(limits$LowHzlimit))
limits[,2]<-as.numeric(as.character(limits$HighHzlimit))
limits$Hz<-as.numeric(as.character(limits$Hz))
limits$besthz<-as.numeric(as.character(limits$besthz))
limits$bestsensitivity<-as.numeric(as.character(limits$bestsensitivity))
library(ggrepel)
library(ggplot)
library(ggpubr)
#load audiograms
fig1<-read.csv(file.choose(), stringsAsFactors = FALSE)
####################get the high and low Hz limits from a cutoff level##########
splt<-split(fig1,fig1$Species)
#set cutoff for the high and low Hz limits (dB)
cutoff<-35
#create new matrix to populate with data and convert to data audiogramram
limits<-matrix(nrow=length(splt),ncol = 7)
for(i in seq_along(splt)){
audiogram<-data.frame()#
df_audiogram<-as.data.frame(approx(splt[[i]]$Hz,splt[[i]]$Threshold,n = 500))#approx function to interpolate audiogram
df_audiogram
#df_audiogram$y is sound level (dB)
#df_audiogram$x is frequency (Hz)
besthz<-df_audiogram$x[df_audiogram$y==min(df_audiogram$y)]
bestsensitivity<-df_audiogram$y[df_audiogram$y==min(df_audiogram$y)]
#calcualte low Hz limit
if(nrow(df_audiogram[df_audiogram$y>cutoff & df_audiogram$x <besthz,])==0){#if the audiogram does not go above cutoff value, get minimum frequency tested
lowlimit<-min(df_audiogram$x)
}
else{
lowflank<-df_audiogram[df_audiogram$y>cutoff & df_audiogram$x <besthz,]#get frequency where audiogram crosses cutoff value
lowlimit<-max(lowflank$x)#lowhz limit
}
#calculate high Hz limit
if(nrow(df_audiogram[df_audiogram$y>35 & df_audiogram$x >besthz,])==0){# #if the audiogram does not go above cutoff value, get max frequency tested
highlimit<-max(df_audiogram$x)
}
else{
highflank<-df_audiogram[df_audiogram$y>35 & df_audiogram$x >besthz,]#get frequency where audiogram crosses cutoff value
highlimit<-min(highflank$x)#High hz limit
}
limits[i,1]<-lowlimit
limits[i,2]<-highlimit
limits[i,3]<-splt[[i]]$Species[1]
limits[i,4]<-splt[[i]]$group[1]
limits[i,5]<-splt[[i]]$Hz[1]
limits[i,6]<-besthz
limits[i,7]<-bestsensitivity
}
#View(limits)
#convert to dataframe and give column names
limits<-as.data.frame(limits)
colnames(limits)<-c("LowHzlimit","HighHzlimit","Species","supraorder","Hz", "besthz","bestsensitivity")
limits[,1]<-as.numeric(as.character(limits$LowHzlimit))
limits[,2]<-as.numeric(as.character(limits$HighHzlimit))
limits$Hz<-as.numeric(as.character(limits$Hz))
limits$besthz<-as.numeric(as.character(limits$besthz))
limits$bestsensitivity<-as.numeric(as.character(limits$bestsensitivity))
limits$binomial<-NA
limits$binomial[limits$Species=="Barn owl"]<-"Tyto_alba"
limits$binomial[limits$Species=="American kestrel"]<-"Falco_rupicolus" #
limits$binomial[limits$Species=="Budgerigar"]<-"Melopsittacus_undulatus"
limits$binomial[limits$Species=="Canary"]<-"Serinus_canaria"
limits$binomial[limits$Species=="Chicken"]<-"Gallus_domesticus"
limits$binomial[limits$Species=="Cockatiel"]<-"Nymphicus_hollandicus"
limits$binomial[limits$Species=="Eurasian eagle owl"]<-"Bubo_africanus"
limits$binomial[limits$Species=="Eurasian sparrowhawk"]<-"Accipiter_melanoleucus"
limits$binomial[limits$Species=="Great cormorant"]<-"Phalacrocorax_capensis"#
limits$binomial[limits$Species=="Hooded crow"]<-"Corvus_albus"#
limits$binomial[limits$Species=="Indian peafowl"]<-"Pavo_muticus"
limits$binomial[limits$Species=="Mallard duck"]<-"Anas_georgica_georgica"
limits$binomial[limits$Species=="Rock dove"]<-"Columba_livia"#
limits$binomial[limits$Species=="Zebra finch"]<-"Taeniopygia_guttata"
View(limits)
library(ggalt)
library(ggrepel)
scatter<-ggplot(limits, aes(x = HighHzlimit, y = LowHzlimit, label = as.factor(Species)))+
#scale_color_brewer(palette = "Set1")+
geom_text_repel()+
geom_point()+
theme_classic()+
scale_x_log10()+
scale_y_log10()+
#xlim(values = c(2500,10000))+
geom_encircle(aes(fill = as.factor(supraorder)),s_shape=1, expand=0, alpha = 0.5)+#s_shape = 1 and expan = 0 are convex hull
#scale_color_brewer(palette = "Set1")+
geom_point()
scatter
range<-ggplot(limits, aes(x = Hz, y = reorder(Species, LowHzlimit), col= supraorder))+
geom_linerange(aes(x = besthz, xmin = LowHzlimit, xmax = HighHzlimit), size = 3)+
geom_point(aes(x = besthz), size = 3, col = "black")+
scale_color_brewer(palette = "Set1")+
scale_x_log10()+
theme_classic()+
coord_cartesian(clip = "off")+
annotation_logticks(sides = "b", outside = TRUE)+
geom_vline(xintercept = median(limits$LowHzlimit))+
geom_vline(xintercept = min(limits$LowHzlimit))+
geom_vline(xintercept = max(limits$LowHzlimit))+
ylab("Species")+
xlab("Frequency(Hz)")+
theme(legend.position = "none")
range
variation<-ggplot(limitslong,aes(x = reorder(Hzlimittype,-Hzlimitvalue), y = Hzlimitvalue))+
geom_boxplot()+
geom_point(shape = 1, size = 2)+
scale_y_log10()+
theme_classic()+
coord_cartesian(clip = "off")+
annotation_logticks(sides = "l", outside = TRUE)
variation
aa<-ggplot(fig1, aes(x = Hz, y = Threshold, factor = Species))+
geom_line(aes(col = group), size = 2)+
scale_color_brewer(palette = "Set1")+
scale_x_log10()+
geom_hline(yintercept = 35)+
ylab("Threshold (dB SPL)")+
xlab("Frequency (Hz)")+
theme_classic()+
#theme(legend.position = "none")+
coord_cartesian(clip = "off")+
annotation_logticks(sides = "b", outside = TRUE)
aa
aas<-function(d){
set<-fig1[fig1$Species==unique(fig1$Species)[d],]
bestsensitivity<-set$Threshold[set$Threshold==min(set$Threshold)]
bestHz<-set$Hz[set$Threshold==min(set$Threshold)]
highHz<-set$Hz[set$Threshold==min(set$Threshold)]
lowHz<-set$Hz[set$Threshold==min(set$Threshold)]
ggplot(set, aes(x = Hz, y = Threshold, factor = Species))+
geom_line(aes(col = Species), size = 2)+
scale_color_brewer(palette = "Set1")+
geom_hline(yintercept = bestsensitivity)+
geom_hline(yintercept = 35)+
geom_vline(xintercept = bestHz)+
geom_vline(xintercept = 250)+
geom_vline(xintercept = 6029)+
#geom_hline(fig1[fig1$Species==unique(fig1$Species)[d],], yintercept = min(Hz, na.rm = T))+
scale_x_log10()+
theme_classic()+
#theme(legend.position = "none")+
coord_cartesian(clip = "off")+
ylab("Threshold (dB SPL)")+
annotation_logticks(sides = "b", outside = TRUE)
}
aas(4)
aas<-function(d){
set<-fig1[fig1$Species==unique(fig1$Species)[d],]
bestsensitivity<-set$Threshold[set$Threshold==min(set$Threshold)]
bestHz<-set$Hz[set$Threshold==min(set$Threshold)]
highHz<-set$Hz[set$Threshold==min(set$Threshold)]
lowHz<-set$Hz[set$Threshold==min(set$Threshold)]
ggplot(set, aes(x = Hz, y = Threshold, factor = Species))+
geom_line(aes(col = Species), size = 2)+
scale_color_brewer(palette = "Set1")+
geom_hline(yintercept = bestsensitivity)+
geom_hline(yintercept = 35)+
geom_vline(xintercept = bestHz)+
geom_vline(xintercept = 250)+
geom_vline(xintercept = 6029)+
#geom_hline(fig1[fig1$Species==unique(fig1$Species)[d],], yintercept = min(Hz, na.rm = T))+
scale_x_log10()+
theme_bw()+
#theme(legend.position = "none")+
coord_cartesian(clip = "off")+
ylab("Threshold (dB SPL)")+
annotation_logticks(sides = "b", outside = TRUE)
}
aas(4)
aas<-function(d){
set<-fig1[fig1$Species==unique(fig1$Species)[d],]
bestsensitivity<-set$Threshold[set$Threshold==min(set$Threshold)]
bestHz<-set$Hz[set$Threshold==min(set$Threshold)]
highHz<-set$Hz[set$Threshold==min(set$Threshold)]
lowHz<-set$Hz[set$Threshold==min(set$Threshold)]
ggplot(set, aes(x = Hz, y = Threshold, factor = Species))+
geom_line(aes())+
scale_color_brewer(palette = "Set1")+
geom_hline(yintercept = bestsensitivity)+
geom_hline(yintercept = 35)+
geom_vline(xintercept = bestHz)+
geom_vline(xintercept = 250)+
geom_vline(xintercept = 6029)+
#geom_hline(fig1[fig1$Species==unique(fig1$Species)[d],], yintercept = min(Hz, na.rm = T))+
scale_x_log10()+
theme_bw()+
#theme(legend.position = "none")+
coord_cartesian(clip = "off")+
ylab("Threshold (dB SPL)")+
annotation_logticks(sides = "b", outside = TRUE)
}
aas(4)
aas<-function(d){
set<-fig1[fig1$Species==unique(fig1$Species)[d],]
bestsensitivity<-set$Threshold[set$Threshold==min(set$Threshold)]
bestHz<-set$Hz[set$Threshold==min(set$Threshold)]
highHz<-set$Hz[set$Threshold==min(set$Threshold)]
lowHz<-set$Hz[set$Threshold==min(set$Threshold)]
ggplot(set, aes(x = Hz, y = Threshold, factor = Species))+
geom_line(aes(),size = 2)+
scale_color_brewer(palette = "Set1")+
geom_hline(yintercept = bestsensitivity)+
geom_hline(yintercept = 35)+
geom_vline(xintercept = bestHz)+
geom_vline(xintercept = 250)+
geom_vline(xintercept = 6029)+
#geom_hline(fig1[fig1$Species==unique(fig1$Species)[d],], yintercept = min(Hz, na.rm = T))+
scale_x_log10()+
theme_bw()+
#theme(legend.position = "none")+
coord_cartesian(clip = "off")+
ylab("Threshold (dB SPL)")+
annotation_logticks(sides = "b", outside = TRUE)
}
aas(4)
aas(4)+ylim(c(0,80))
aas<-function(d){
set<-fig1[fig1$Species==unique(fig1$Species)[d],]
bestsensitivity<-set$Threshold[set$Threshold==min(set$Threshold)]
bestHz<-set$Hz[set$Threshold==min(set$Threshold)]
highHz<-set$Hz[set$Threshold==min(set$Threshold)]
lowHz<-set$Hz[set$Threshold==min(set$Threshold)]
ggplot(set, aes(x = Hz, y = Threshold, factor = Species))+
geom_line(aes(),size = 2)+
scale_color_brewer(palette = "Set1")+
geom_hline(yintercept = bestsensitivity)+
geom_hline(yintercept = 35)+
geom_vline(xintercept = bestHz)+
geom_vline(xintercept = 250)+
geom_vline(xintercept = 6029)+
#geom_hline(fig1[fig1$Species==unique(fig1$Species)[d],], yintercept = min(Hz, na.rm = T))+
scale_x_log10()+
theme_bw()+
#theme(legend.position = "none")+
coord_cartesian(clip = "off")+
ylab("Threshold (dB SPL)")+
xlab("Frequency (Hz)")
annotation_logticks(sides = "b", outside = TRUE)
}
aas(4)+ylim(c(0,80))
aas(4)+ylim(c(0,80))+
geom_text(aes(x = 250, y = 30, label = "hi"))
?geom_text
aas(4)
aas<-function(d){
set<-fig1[fig1$Species==unique(fig1$Species)[d],]
bestsensitivity<-set$Threshold[set$Threshold==min(set$Threshold)]
bestHz<-set$Hz[set$Threshold==min(set$Threshold)]
highHz<-set$Hz[set$Threshold==min(set$Threshold)]
lowHz<-set$Hz[set$Threshold==min(set$Threshold)]
ggplot(set, aes(x = Hz, y = Threshold, factor = Species))+
geom_line(aes(),size = 2)+
scale_color_brewer(palette = "Set1")+
geom_hline(yintercept = bestsensitivity)+
geom_hline(yintercept = 35)+
geom_vline(xintercept = bestHz)+
geom_vline(xintercept = 250)+
geom_vline(xintercept = 6029)+
#geom_hline(fig1[fig1$Species==unique(fig1$Species)[d],], yintercept = min(Hz, na.rm = T))+
scale_x_log10()+
theme_bw()+
#theme(legend.position = "none")+
coord_cartesian(clip = "off")+
ylab("Threshold (dB SPL)")+
xlab("Frequency (Hz)")+
annotation_logticks(sides = "b", outside = TRUE)
}
aas(4)+ylim(c(0,80))+
geom_text(aes(x = 250, y = 30, label = "hi"))
aas(4)+ylim(c(0,80))+
geom_text(aes(x = 250, y = 30, label = "hi"))
aas(4)+ylim(c(0,80))
?geom_vline
View(convert)
View(AcousticCalcs::convert)
list.dirs("C:/Users/jeffz/Desktop/out/Outputs"")
list.dirs("C:/Users/jeffz/Desktop/out/Outputs")
list.dirs("C:/Users/jeffz/Desktop/out/Outputs")
list.dirs("C:/Users/jeffz/Desktop/out/Outputs", recursive = F)
# import libraries
library(Morpho)#read.mpp function
library(geomorph)#digit curves function
library(rgl)#plotting
getwd()
#set working directory to where the R scripts are located
setwd("C:/Users/jeffz/Desktop/New folder (2)/Ear-measures/Scan_measurements")
inputfolder<-"C:/Users/jeffz/Desktop/New folder"
index<-3# in a set of several specimens at once, all in a subfolder of a main folder. Index indicates which subfolder to process.
ID<-"test2"
source("checkfiles.R")
lengths
repositorypath<-"C:/Users/jeffz/Desktop/New folder (2)/Ear-measures/Scan_measurements"
setwd(repositorypath)
source("run calculations.R")
setwd(repositorypath)
#####################3
#################### CHECK WIREFRAME PLOTS
#plot wireframe diagram of ear based input corrdinates. Will prompt for the 3D *.stl file for the columella
#setwd(paste0(Volume,":/0earmeasures/Scan_measurements/"))
source("plot_ear_auto_STL.R")
Volume<-"C:/Users/jeffz/Desktop/out"# base path for file exporting
dir.create(paste0(Volume,"/Outputs/"))
dir.create(paste0(Volume,"/Outputs/Singlevalues"))
dir.create(paste0(Volume,"/Outputs/TM angles"))
dir.create(paste0(Volume,"/Outputs/Coordinates"))
dir.create(paste0(Volume,"/Outputs/Snapshots"))
dir.create(paste0(Volume,"/Outputs/FCSVs"))
dir.create(paste0(Volume,"/Outputs/STLs"))
ID
outputpathsingles<-paste0(Volume,"/Outputs/Singlevalues/")#calculated values
outputpathangles<-paste0(Volume,"/Outputs/TM angles/")#angles for all
outputpathcoords<-paste0(Volume,"/Outputs/Coordinates/")# all computed coordinates on a single csv file
snapshotpath<-paste0(Volume,"/Outputs/Snapshots/")#directory for wirefram snapshots
outputfcsv<-paste0(Volume,"/Outputs/FCSVs/")
STLpath<-paste0(Volume,"/Outputs/STLs/")
#Save the computations and coordinates
setwd(paste0(Volume,":/0earmeasures/Scan_measurements/"))
source("outputs.R")
ID
setwd(repositorypath)
source("outputs.R")
ID
list.dirs(inputfolder)
##### IMPORT LIBRARIES#####
library(Morpho)#read.mpp function
library(geomorph)#digit curves function
library(rgl)#plotting
#set working directory to where the R scripts are located
repositorypath<-"C:/Users/jeffz/Desktop/New folder (2)/Ear-measures/Scan_measurements"
setwd(repositorypath)
inputfolder<-"C:/Users/jeffz/Desktop/New folder"
listdirs(inputfolder)
index<-3
#set the ID code for the specimen
ID<-"test2"
ID<-"test3"
getwd()
source("checkfiles.R")#checks that all the needed files are present in the folder.
lengths
getwd()
setwd(repositorypath)
source("run calculations.R")
setwd(repositorypath)
source("plot_ear_auto_STL.R")
Volume<-"C:/Users/jeffz/Desktop/out"# set base path for file exporting
dir.create(paste0(Volume,"/Outputs/"))
dir.create(paste0(Volume,"/Outputs/Singlevalues"))
dir.create(paste0(Volume,"/Outputs/TM angles"))
dir.create(paste0(Volume,"/Outputs/Coordinates"))
dir.create(paste0(Volume,"/Outputs/Snapshots"))
dir.create(paste0(Volume,"/Outputs/FCSVs"))
dir.create(paste0(Volume,"/Outputs/STLs"))
outputpathsingles<-paste0(Volume,"/Outputs/Singlevalues/")#calculated values
outputpathangles<-paste0(Volume,"/Outputs/TM angles/")#angles for all
outputpathcoords<-paste0(Volume,"/Outputs/Coordinates/")# all computed coordinates on a single csv file
snapshotpath<-paste0(Volume,"/Outputs/Snapshots/")#directory for wirefram snapshots
outputfcsv<-paste0(Volume,"/Outputs/FCSVs/")
STLpath<-paste0(Volume,"/Outputs/STLs/")
setwd(repositorypath)
source("outputs.R")
ID
source("plot_ear_auto_STL.R")
index<-3
ID<-"test3"
#check files are all there for calculations
source("checkfiles.R")#checks that all the needed files are present in the folder.
lengths
#'lengths' should be a sequence of 6 1s. If not, a file is missing, or there are extra files
setwd(repositorypath)
#####################################RUN CALCULATIONS##########
source("run calculations.R")
setwd(repositorypath)
#####################3
#################### CHECK WIREFRAME PLOTS###############
#plot wireframe diagram of ear based input corrdinates. Will prompt for the 3D *.stl file for the columella
source("plot_ear_auto_STL.R")
##################EXPORT#############
Volume<-"C:/Users/jeffz/Desktop/out"# set base path for file exporting
dir.create(paste0(Volume,"/Outputs/"))
dir.create(paste0(Volume,"/Outputs/Singlevalues"))
dir.create(paste0(Volume,"/Outputs/TM angles"))
dir.create(paste0(Volume,"/Outputs/Coordinates"))
dir.create(paste0(Volume,"/Outputs/Snapshots"))
dir.create(paste0(Volume,"/Outputs/FCSVs"))
dir.create(paste0(Volume,"/Outputs/STLs"))
####CHECK OUTPUT PATH DRIVE IS GOING TO CORRECT USB/ HARD DRIVE"
#set output paths for saving the computed values
outputpathsingles<-paste0(Volume,"/Outputs/Singlevalues/")#calculated values
outputpathangles<-paste0(Volume,"/Outputs/TM angles/")#angles for all
outputpathcoords<-paste0(Volume,"/Outputs/Coordinates/")# all computed coordinates on a single csv file
snapshotpath<-paste0(Volume,"/Outputs/Snapshots/")#directory for wirefram snapshots
outputfcsv<-paste0(Volume,"/Outputs/FCSVs/")
STLpath<-paste0(Volume,"/Outputs/STLs/")
#Save the computations and coordinates
setwd(repositorypath)
source("outputs.R")
ID
inputfolder<-"input"
listdirs(inputfolder)
listdirs(inputfolder)
?list.dirs
list.dirs(inputfolder)
inputfolder<-"input"
list.dirs(inputfolder)
list.files(inputfolder)
source("checkfiles.R")#checks that all the needed files are present in the folder.
lengths
inputfolder<-"input"
list.files(inputfolder)
index<-3
#set the ID code for the specimen
ID<-"test3"
#check files are all there for calculations
source("checkfiles.R")#checks that all the needed files are present in the folder.
lengths
inputfolder<-"input"
list.dirs(inputfolder)
index<-3
ID<-"RD04b"
source("checkfiles.R")#
lengths
##### IMPORT LIBRARIES#####
library(Morpho)#read.mpp function
library(geomorph)#digit curves function
library(rgl)#plotting
######################################LOAD DATA#########
#set working directory to where the R scripts are located
repositorypath<-"C:/Users/jeffz/Desktop/New folder (2)/Ear-measures/Scan_measurements"
setwd(repositorypath)
#indicate main folder where data are located
#Each speci all in a subfolder of a main folder.
#Index indicates which subfolder (species) to process.
inputfolder<-"input"
list.dirs(inputfolder)
index<-3
#set the ID code for the specimen
ID<-"RD04b"
#check that all needed files are there for calculations
source("checkfiles.R")#
lengths
setwd(repositorypath)
inputfolder<-"input"
list.dirs(inputfolder)
index<-3
#set the ID code for the specimen
ID<-"RD04b"
#check that all needed files are there for calculations
source("checkfiles.R")#
lengths
inputfolder
paste0(repositorypath,"/input")
inputfolder<-paste0(repositorypath,"/input")
list.dirs(inputfolder)
index<-3
#set the ID code for the specimen
ID<-"RD04b"
#check that all needed files are there for calculations
source("checkfiles.R")#
lengths
paste0(repositorypath,"/input")
list.dirs(inputfolder)
source("checkfiles.R")
getwd()
repositorypath<-"C:/Users/jeffz/Desktop/New folder (2)/Ear-measures/Scan_measurements"
setwd(repositorypath)
#indicate main folder where data are located
#Each speci all in a subfolder of a main folder.
#Index indicates which subfolder (species) to process.
inputfolder<-paste0(repositorypath,"/input")
list.dirs(inputfolder)
index<-3
setwd(repositorypath)
#set the ID code for the specimen
ID<-"RD04b"
source("checkfiles.R")#
lengths
setwd(repositorypath)
#####################################RUN CALCULATIONS##########
source("run calculations.R")
setwd(repositorypath)
#####################3
#################### CHECK WIREFRAME PLOTS###############
#plot wireframe diagram of ear based input corrdinates. Will prompt for the 3D *.stl file for the columella
source("plot_ear_auto_STL.R")
##################EXPORT#############
Volume<-"C:/Users/jeffz/Desktop/out"# set base path for file exporting
dir.create(paste0(Volume,"/Outputs/"))
dir.create(paste0(Volume,"/Outputs/Singlevalues"))
dir.create(paste0(Volume,"/Outputs/TM angles"))
dir.create(paste0(Volume,"/Outputs/Coordinates"))
dir.create(paste0(Volume,"/Outputs/Snapshots"))
dir.create(paste0(Volume,"/Outputs/FCSVs"))
dir.create(paste0(Volume,"/Outputs/STLs"))
####CHECK OUTPUT PATH DRIVE IS GOING TO CORRECT USB/ HARD DRIVE"
#set output paths for saving the computed values
outputpathsingles<-paste0(Volume,"/Outputs/Singlevalues/")#calculated values
outputpathangles<-paste0(Volume,"/Outputs/TM angles/")#angles for all
outputpathcoords<-paste0(Volume,"/Outputs/Coordinates/")# all computed coordinates on a single csv file
snapshotpath<-paste0(Volume,"/Outputs/Snapshots/")#directory for wirefram snapshots
outputfcsv<-paste0(Volume,"/Outputs/FCSVs/")
STLpath<-paste0(Volume,"/Outputs/STLs/")
#Save the computations and coordinates
setwd(repositorypath)
source("outputs.R")
ID
