one<-points[1,]
two<-points[2,]
three<-points[4,]
linedirection1_2<-as.data.frame(one-two)
linedirection3_2<-as.data.frame(three-two)
View(linedirection3_2)
top<-abs((linedirection1_2[1,1]*linedirection3_2[1,1])+
as.numeric(linedirection1_2[1,2]*linedirection3_2[1,2])+
as.numeric(linedirection1_2[1,3]*linedirection3_2[1,3]))
b
bottom<- sqrt((linedirection1_2[1,1]^2)+(linedirection1_2[1,2]^2)+(linedirection1_2[1,3]^2))*
sqrt((linedirection3_2[1,1]^2)+(linedirection3_2[1,2]^2)+(linedirection3_2[1,3]^2))
cosangle<- abs(top/bottom)
angle_<-acos(cosangle)*180/pi
angle_
acos(cosangle)
one<-points[1,]
two<-points[2,]
three<-points[3,]
linedirection1_2<-as.data.frame(one-two)
linedirection3_2<-as.data.frame(three-two)
top<-abs((linedirection1_2[1,1]*linedirection3_2[1,1])+
as.numeric(linedirection1_2[1,2]*linedirection3_2[1,2])+
as.numeric(linedirection1_2[1,3]*linedirection3_2[1,3]))
bottom<- sqrt((linedirection1_2[1,1]^2)+(linedirection1_2[1,2]^2)+(linedirection1_2[1,3]^2))*
sqrt((linedirection3_2[1,1]^2)+(linedirection3_2[1,2]^2)+(linedirection3_2[1,3]^2))
cosangle<- abs(top/bottom)
angle_<-acos(cosangle)*180/pi
one<-points[1,]
two<-points[2,]
three<-points[6,]
linedirection1_2<-as.data.frame(one-two)
linedirection3_2<-as.data.frame(three-two)
top<-abs((linedirection1_2[1,1]*linedirection3_2[1,1])+
as.numeric(linedirection1_2[1,2]*linedirection3_2[1,2])+
as.numeric(linedirection1_2[1,3]*linedirection3_2[1,3]))
bottom<- sqrt((linedirection1_2[1,1]^2)+(linedirection1_2[1,2]^2)+(linedirection1_2[1,3]^2))*
sqrt((linedirection3_2[1,1]^2)+(linedirection3_2[1,2]^2)+(linedirection3_2[1,3]^2))
cosangle<- abs(top/bottom)
angle_<-acos(cosangle)*180/pi
points<-as.data.frame(read.fcsv(file.choose()))
points
one<-points[1,]
two<-points[2,]
three<-points[5,]
linedirection1_2<-as.data.frame(one-two)
linedirection3_2<-as.data.frame(three-two)
top<-abs((linedirection1_2[1,1]*linedirection3_2[1,1])+
as.numeric(linedirection1_2[1,2]*linedirection3_2[1,2])+
as.numeric(linedirection1_2[1,3]*linedirection3_2[1,3]))
bottom<- sqrt((linedirection1_2[1,1]^2)+(linedirection1_2[1,2]^2)+(linedirection1_2[1,3]^2))*
sqrt((linedirection3_2[1,1]^2)+(linedirection3_2[1,2]^2)+(linedirection3_2[1,3]^2))
cosangle<- abs(top/bottom)
angle_<-acos(cosangle)*180/pi
points<-as.data.frame(read.fcsv(file.choose()))
points
one<-points[1,]
two<-points[2,]#fulcrum
three<-points[6,]
linedirection1_2<-as.data.frame(one-two)
linedirection3_2<-as.data.frame(three-two)
top<-abs((linedirection1_2[1,1]*linedirection3_2[1,1])+
as.numeric(linedirection1_2[1,2]*linedirection3_2[1,2])+
as.numeric(linedirection1_2[1,3]*linedirection3_2[1,3]))
bottom<- sqrt((linedirection1_2[1,1]^2)+(linedirection1_2[1,2]^2)+(linedirection1_2[1,3]^2))*
sqrt((linedirection3_2[1,1]^2)+(linedirection3_2[1,2]^2)+(linedirection3_2[1,3]^2))
cosangle<- abs(top/bottom)
angle_<-acos(cosangle)*180/pi
one<-points[1,]
two<-points[2,]#fulcrum
three<-points[1,]
linedirection1_2<-as.data.frame(one-two)
linedirection3_2<-as.data.frame(three-two)
top<-abs((linedirection1_2[1,1]*linedirection3_2[1,1])+
as.numeric(linedirection1_2[1,2]*linedirection3_2[1,2])+
as.numeric(linedirection1_2[1,3]*linedirection3_2[1,3]))
bottom<- sqrt((linedirection1_2[1,1]^2)+(linedirection1_2[1,2]^2)+(linedirection1_2[1,3]^2))*
sqrt((linedirection3_2[1,1]^2)+(linedirection3_2[1,2]^2)+(linedirection3_2[1,3]^2))
cosangle<- abs(top/bottom)
angle_<-acos(cosangle)*180/pi
points<-as.data.frame(read.fcsv(file.choose()))
one<-points[1,]
two<-points[2,]#fulcrum
three<-points[8,]
linedirection1_2<-as.data.frame(one-two)
linedirection3_2<-as.data.frame(three-two)
top<-abs((linedirection1_2[1,1]*linedirection3_2[1,1])+
as.numeric(linedirection1_2[1,2]*linedirection3_2[1,2])+
as.numeric(linedirection1_2[1,3]*linedirection3_2[1,3]))
bottom<- sqrt((linedirection1_2[1,1]^2)+(linedirection1_2[1,2]^2)+(linedirection1_2[1,3]^2))*
sqrt((linedirection3_2[1,1]^2)+(linedirection3_2[1,2]^2)+(linedirection3_2[1,3]^2))
cosangle<- abs(top/bottom)
angle_<-acos(cosangle)*180/pi
three<-points[7,]
linedirection1_2<-as.data.frame(one-two)
linedirection3_2<-as.data.frame(three-two)
top<-abs((linedirection1_2[1,1]*linedirection3_2[1,1])+
as.numeric(linedirection1_2[1,2]*linedirection3_2[1,2])+
as.numeric(linedirection1_2[1,3]*linedirection3_2[1,3]))
bottom<- sqrt((linedirection1_2[1,1]^2)+(linedirection1_2[1,2]^2)+(linedirection1_2[1,3]^2))*
sqrt((linedirection3_2[1,1]^2)+(linedirection3_2[1,2]^2)+(linedirection3_2[1,3]^2))
cosangle<- abs(top/bottom)
angle_<-acos(cosangle)*180/pi
points[1:4,]
planepoints<-points[1:4,
planefit<- lm(planepoints[,3]~planepoints[,1]+planepoints[,2])
summary(plantefit)
planefit<- lm(planepoints[,3]~planepoints[,1]+planepoints[,2])
planepoints<-points[1:4,]
planefit<- lm(planepoints[,3]~planepoints[,1]+planepoints[,2])
summary(planefit)
coefsTM<- coef(planefit)
TM1a <- unname(coefsTM["TMcurve[, 1]"])
TM1b <- unname(coefsTM["TMcurve[, 2]"])
TM1c <- -1
TM1d <- unname(coefsTM["(Intercept)"])
TM1a
TM1b
planepoints<-as.data.frame(read.fcsv(file.choose()))
planefit<- lm(planepoints[,3]~planepoints[,1]+planepoints[,2])
summary(planefit)
coefsTM<- coef(planefit)
TM1a <- unname(coefsTM["TMcurve[, 1]"])
TM1b <- unname(coefsTM["TMcurve[, 2]"])
TM1c <- -1
TM1d <- unname(coefsTM["(Intercept)"])
TM1d
TMcurve<-as.data.frame(read.fcsv(file.choose()))
fitTM1<- lm(TMcurve[,3]~TMcurve[,1]+TMcurve[,2])
summary(fitTM1)
#extract coefficients of plane
coefsTM<- coef(fitTM1)
TM1a <- unname(coefsTM["TMcurve[, 1]"])
TM1b <- unname(coefsTM["TMcurve[, 2]"])
TM1c <- -1
TM1d <- unname(coefsTM["(Intercept)"])
#2 - X
###################fit 3D plane. x~ y + z
fitTM2<- lm(TMcurve[,1]~TMcurve[,2]+TMcurve[,3])
summary(fitTM2)
#extract coefficients of plane
coefsTM<- coef(fitTM2)
TM2a <- -1
TM2b <- unname(coefsTM["TMcurve[, 2]"])
TM2c <- unname(coefsTM["TMcurve[, 3]"])
TM2d <- unname(coefsTM["(Intercept)"])
#3 - Y
###################fit 3D plane. y~ x + z
fitTM3<- lm(TMcurve[,2]~TMcurve[,1]+TMcurve[,3])
summary(fitTM3)
#extract coefficients of plane
coefsTM<- coef(fitTM3)
TM3a <- unname(coefsTM["TMcurve[, 1]"])
TM3b <- -1
TM3c <- unname(coefsTM["TMcurve[, 3]"])
TM3d <- unname(coefsTM["(Intercept)"])
Z<-summary(fitTM1)$r.squared
X<-summary(fitTM2)$r.squared
Y<-summary(fitTM3)$r.squared
if (Z > X & Y){
#extract coefficients of plane
coefsTM<- coef(fitTM1)
TMa <- unname(coefsTM["TMcurve[, 1]"])
TMb <- unname(coefsTM["TMcurve[, 2]"])
TMc <- -1
TMd <- unname(coefsTM["(Intercept)"])
} else if (X > Z & Y){
coefsTM<- coef(fitTM2)
TMa <- -1
TMb <- unname(coefsTM["TMcurve[, 2]"])
TMc <- unname(coefsTM["TMcurve[, 3]"])
TMd <- unname(coefsTM["(Intercept)"])
} else if (Y > X & Y){
coefsTM<- coef(fitTM3)
TMa <- unname(coefsTM["TMcurve[, 1]"])
TMb <- -1
TMc <- unname(coefsTM["TMcurve[, 3]"])
TMd <- unname(coefsTM["(Intercept)"])
}
points<-as.data.frame(read.fcsv(file.choose()))
TMcurve-point[1,]
TMcurve-points[1,]
length(TMcurve)
nrow(TMcurve)
rep(points[1,],nrow(TMcurve))
as.data.frame(rep(points[1,],nrow(TMcurve)))
pointx<-as.data.frame(rep(points[1,],nrow(TMcurve)))
View(pointx)
rbind(rep(points[1,],nrow(TMcurve))
pointx<-as.data.frame(rbind(rep(points[1,],nrow(TMcurve)))
planecoefficents[rep(1:nrow(planecoefficents),1,each=nrow(linedirectionvector)),]
?rep
pointx
pointx<-points[1,]
pointx
TMcurve
linedirectionvector<-TMcurve[1,]-points[1,]
colnames(linedirectionvector)<-c("u1","u2","u3")
planecoefficents<-as.data.frame(cbind(TMa,TMb,TMc))
colnames(planecoefficents)<- c("A","B","C")
top<-abs((all$A*all$u1)+(all$B*all$u2)+(all$C*all$u3))
all<-cbind(linedirectionvector,planecoefficient)
all<-cbind(linedirectionvector,planecoefficients)
planecoefficents<-as.data.frame(cbind(TMa,TMb,TMc))
colnames(planecoefficents)<- c("A","B","C")
all<-cbind(linedirectionvector,planecoefficients)
all<-cbind(linedirectionvector,planecoefficents)
View(all)
top<-abs((all$A*all$u1)+(all$B*all$u2)+(all$C*all$u3))
bottom<-sqrt((all$A^2)+(all$B^2)+(all$C^2))*sqrt((all$u1^2)+(all$u2^2)+(all$u3^2))
angles<-as.data.frame(asin(top/bottom))*180/pi#convert from degrees to radians
angles
meanTMangle<-mean(angles$`asin(top/bottom)`)
meanTMangle
pointx<-points[1,]
#1a)calculate line vectors connecting perimeter points to umbo
linedirectionvector<-TMcurve[1,]-pointx
colnames(linedirectionvector)<-c("u1","u2","u3")
planecoefficents<-as.data.frame(cbind(TMa,TMb,TMc))
colnames(planecoefficents)<- c("A","B","C")
planecoefficientrepeated<-planecoefficents[rep(1:nrow(planecoefficents),1,each=nrow(linedirectionvector)),]
all<-cbind(linedirectionvector,planecoefficientrepeated)
rownames(all)<-seq(1:nrow(linedirectionvector))
all<-cbind(linedirectionvector,planecoefficents)
#1b) calculate angle between line and tympanic membrane plane
top<-abs((all$A*all$u1)+(all$B*all$u2)+(all$C*all$u3))
bottom<-sqrt((all$A^2)+(all$B^2)+(all$C^2))*sqrt((all$u1^2)+(all$u2^2)+(all$u3^2))
angles<-as.data.frame(asin(top/bottom))*180/pi#convert from degrees to radians
meanTMangle<-mean(angles$`asin(top/bottom)`)
#sdTMangle<-sd(angles$`asin(top/bottom)`)
angles
pointx<-points[2,]
#1a)calculate line vectors connecting perimeter points to umbo
linedirectionvector<-TMcurve[1,]-pointx
colnames(linedirectionvector)<-c("u1","u2","u3")
planecoefficents<-as.data.frame(cbind(TMa,TMb,TMc))
colnames(planecoefficents)<- c("A","B","C")
planecoefficientrepeated<-planecoefficents[rep(1:nrow(planecoefficents),1,each=nrow(linedirectionvector)),]
all<-cbind(linedirectionvector,planecoefficientrepeated)
rownames(all)<-seq(1:nrow(linedirectionvector))
all<-cbind(linedirectionvector,planecoefficents)
#1b) calculate angle between line and tympanic membrane plane
top<-abs((all$A*all$u1)+(all$B*all$u2)+(all$C*all$u3))
bottom<-sqrt((all$A^2)+(all$B^2)+(all$C^2))*sqrt((all$u1^2)+(all$u2^2)+(all$u3^2))
angles<-as.data.frame(asin(top/bottom))*180/pi#convert from degrees to radians
meanTMangle<-mean(angles$`asin(top/bottom)`)
#sdTMangle<-sd(angles$`asin(top/bottom)`)
angles
pointx<-points[3,]
#1a)calculate line vectors connecting perimeter points to umbo
linedirectionvector<-TMcurve[1,]-pointx
colnames(linedirectionvector)<-c("u1","u2","u3")
planecoefficents<-as.data.frame(cbind(TMa,TMb,TMc))
colnames(planecoefficents)<- c("A","B","C")
planecoefficientrepeated<-planecoefficents[rep(1:nrow(planecoefficents),1,each=nrow(linedirectionvector)),]
all<-cbind(linedirectionvector,planecoefficientrepeated)
rownames(all)<-seq(1:nrow(linedirectionvector))
all<-cbind(linedirectionvector,planecoefficents)
#1b) calculate angle between line and tympanic membrane plane
top<-abs((all$A*all$u1)+(all$B*all$u2)+(all$C*all$u3))
bottom<-sqrt((all$A^2)+(all$B^2)+(all$C^2))*sqrt((all$u1^2)+(all$u2^2)+(all$u3^2))
angles<-as.data.frame(asin(top/bottom))*180/pi#convert from degrees to radians
meanTMangle<-mean(angles$`asin(top/bottom)`)
#sdTMangle<-sd(angles$`asin(top/bottom)`)
angles
pointx<-points[4,]
#1a)calculate line vectors connecting perimeter points to umbo
linedirectionvector<-TMcurve[1,]-pointx
colnames(linedirectionvector)<-c("u1","u2","u3")
planecoefficents<-as.data.frame(cbind(TMa,TMb,TMc))
colnames(planecoefficents)<- c("A","B","C")
planecoefficientrepeated<-planecoefficents[rep(1:nrow(planecoefficents),1,each=nrow(linedirectionvector)),]
all<-cbind(linedirectionvector,planecoefficientrepeated)
rownames(all)<-seq(1:nrow(linedirectionvector))
all<-cbind(linedirectionvector,planecoefficents)
#1b) calculate angle between line and tympanic membrane plane
top<-abs((all$A*all$u1)+(all$B*all$u2)+(all$C*all$u3))
bottom<-sqrt((all$A^2)+(all$B^2)+(all$C^2))*sqrt((all$u1^2)+(all$u2^2)+(all$u3^2))
angles<-as.data.frame(asin(top/bottom))*180/pi#convert from degrees to radians
meanTMangle<-mean(angles$`asin(top/bottom)`)
#sdTMangle<-sd(angles$`asin(top/bottom)`)
angles
pointx<-points[5,]
#1a)calculate line vectors connecting perimeter points to umbo
linedirectionvector<-TMcurve[1,]-pointx
colnames(linedirectionvector)<-c("u1","u2","u3")
planecoefficents<-as.data.frame(cbind(TMa,TMb,TMc))
colnames(planecoefficents)<- c("A","B","C")
planecoefficientrepeated<-planecoefficents[rep(1:nrow(planecoefficents),1,each=nrow(linedirectionvector)),]
all<-cbind(linedirectionvector,planecoefficientrepeated)
rownames(all)<-seq(1:nrow(linedirectionvector))
all<-cbind(linedirectionvector,planecoefficents)
#1b) calculate angle between line and tympanic membrane plane
top<-abs((all$A*all$u1)+(all$B*all$u2)+(all$C*all$u3))
bottom<-sqrt((all$A^2)+(all$B^2)+(all$C^2))*sqrt((all$u1^2)+(all$u2^2)+(all$u3^2))
angles<-as.data.frame(asin(top/bottom))*180/pi#convert from degrees to radians
meanTMangle<-mean(angles$`asin(top/bottom)`)
#sdTMangle<-sd(angles$`asin(top/bottom)`)
angles
pointx<-points[6,]
#1a)calculate line vectors connecting perimeter points to umbo
linedirectionvector<-TMcurve[1,]-pointx
colnames(linedirectionvector)<-c("u1","u2","u3")
planecoefficents<-as.data.frame(cbind(TMa,TMb,TMc))
colnames(planecoefficents)<- c("A","B","C")
planecoefficientrepeated<-planecoefficents[rep(1:nrow(planecoefficents),1,each=nrow(linedirectionvector)),]
all<-cbind(linedirectionvector,planecoefficientrepeated)
rownames(all)<-seq(1:nrow(linedirectionvector))
all<-cbind(linedirectionvector,planecoefficents)
#1b) calculate angle between line and tympanic membrane plane
top<-abs((all$A*all$u1)+(all$B*all$u2)+(all$C*all$u3))
bottom<-sqrt((all$A^2)+(all$B^2)+(all$C^2))*sqrt((all$u1^2)+(all$u2^2)+(all$u3^2))
angles<-as.data.frame(asin(top/bottom))*180/pi#convert from degrees to radians
meanTMangle<-mean(angles$`asin(top/bottom)`)
#sdTMangle<-sd(angles$`asin(top/bottom)`)
angles
?runif
runif(10,-1,1)
print(runif(10,-1,1))
TMcurve<-as.data.frame(read.fcsv(file.choose()))
FPcurve<-as.data.frame(read.fcsv(file.choose()))
#1 - Z
#tympanic membrane plane
#fit 3D plane. z~ x + y
fitTM1<- lm(TMcurve[,3]~TMcurve[,1]+TMcurve[,2])
summary(fitTM1)
#extract coefficients of plane
coefsTM<- coef(fitTM1)
TM1a <- unname(coefsTM["TMcurve[, 1]"])
TM1b <- unname(coefsTM["TMcurve[, 2]"])
TM1c <- -1
TM1d <- unname(coefsTM["(Intercept)"])
#2 - X
###################fit 3D plane. x~ y + z
fitTM2<- lm(TMcurve[,1]~TMcurve[,2]+TMcurve[,3])
summary(fitTM2)
#extract coefficients of plane
coefsTM<- coef(fitTM2)
TM2a <- -1
TM2b <- unname(coefsTM["TMcurve[, 2]"])
TM2c <- unname(coefsTM["TMcurve[, 3]"])
TM2d <- unname(coefsTM["(Intercept)"])
#3 - Y
###################fit 3D plane. y~ x + z
fitTM3<- lm(TMcurve[,2]~TMcurve[,1]+TMcurve[,3])
summary(fitTM3)
#extract coefficients of plane
coefsTM<- coef(fitTM3)
TM3a <- unname(coefsTM["TMcurve[, 1]"])
TM3b <- -1
TM3c <- unname(coefsTM["TMcurve[, 3]"])
TM3d <- unname(coefsTM["(Intercept)"])
Z<-summary(fitTM1)$r.squared
X<-summary(fitTM2)$r.squared
Y<-summary(fitTM3)$r.squared
#select the fit with the greatest R2
if (Z > X & Y){
#extract coefficients of plane
coefsTM<- coef(fitTM1)
TMa <- unname(coefsTM["TMcurve[, 1]"])
TMb <- unname(coefsTM["TMcurve[, 2]"])
TMc <- -1
TMd <- unname(coefsTM["(Intercept)"])
} else if (X > Z & Y){
coefsTM<- coef(fitTM2)
TMa <- -1
TMb <- unname(coefsTM["TMcurve[, 2]"])
TMc <- unname(coefsTM["TMcurve[, 3]"])
TMd <- unname(coefsTM["(Intercept)"])
} else if (Y > X & Y){
coefsTM<- coef(fitTM3)
TMa <- unname(coefsTM["TMcurve[, 1]"])
TMb <- -1
TMc <- unname(coefsTM["TMcurve[, 3]"])
TMd <- unname(coefsTM["(Intercept)"])
}
#check the different planes by plotting:
#lines3d(fullperimeter[,1],fullperimeter[,2],fullperimeter[,3], color = "red", lwd = 3)#plot curve perimeter
#planes3d(TM3a, TM3b, TM3c, TM3d, alpha = 0.5, color = "blue")
#planes3d(TM2a, TM2b, TM2c, TM2d, alpha = 0.5, color = "blue")
#planes3d(TM1a, TM1b, TM1c, TM1d, alpha = 0.5, color = "blue")
#planes3d(TMa, TMb, TMc, TMd, alpha = 0.5, color = "blue")
#fit footplate
#1 - Z
fitFP1<- lm(FPcurve[,3]~FPcurve[,1]+FPcurve[,2])
summary(fitFP1)
#extract coefficients of plane
coefsFP<- coef(fitFP1)
FP1a <- unname(coefsFP["FPcurve[, 1]"])
FP1b <- unname(coefsFP["FPcurve[, 2]"])
FP1c <- -1
FP1d <- unname(coefsFP["(Intercept)"])
#2 - X
###################fit 3D plane. x~ y + z
fitFP2<- lm(FPcurve[,1]~FPcurve[,2]+FPcurve[,3])
summary(fitFP2)
#extract coefficients of plane
coefsFP<- coef(fitFP2)
FP2a <- -1
FP2b <- unname(coefsFP["FPcurve[, 2]"])
FP2c <- unname(coefsFP["FPcurve[, 3]"])
FP2d <- unname(coefsFP["(Intercept)"])
#3 - Y
###################fit 3D plane. y~ x + z
fitFP3<- lm(FPcurve[,2]~FPcurve[,1]+FPcurve[,3])
summary(fitFP3)
#extract coefficients of plane
coefsFP<- coef(fitFP3)
FP3a <- unname(coefsFP["FPcurve[, 1]"])
FP3b <- -1
FP3c <- unname(coefsFP["FPcurve[, 3]"])
FP3d <- unname(coefsFP["(Intercept)"])
#check the different planes by plotting:
Z<-summary(fitFP1)$r.squared
X<-summary(fitFP2)$r.squared
Y<-summary(fitFP3)$r.squared
#select the fit with the greatest R2
if (Z > X & Y){
#extract coefficients of plane
coefsFP<- coef(fitFP1)
FPa <- unname(coefsFP["FPcurve[, 1]"])
FPb <- unname(coefsFP["FPcurve[, 2]"])
FPc <- -1
FPd <- unname(coefsFP["(Intercept)"])
} else if (X > Z & Y){
coefsFP<- coef(fitFP2)
FPa <- -1
FPb <- unname(coefsFP["FPcurve[, 2]"])
FPc <- unname(coefsFP["FPcurve[, 3]"])
FPd <- unname(coefsFP["(Intercept)"])
} else if (Y > X & Y){
coefsFP<- coef(fitFP3)
FPa <- unname(coefsFP["FPcurve[, 1]"])
FPb <- -1
FPc <- unname(coefsFP["FPcurve[, 3]"])
FPd <- unname(coefsFP["(Intercept)"])
}
#lines3d(fullFP[,1],fullFP[,2],fullFP[,3], col = "black", lwd = 3)#plot footplate
#planes3d(FPa, FPb, FPc, FPd, alpha = 0.5, color = "blue")#plot plane of footplate
#planes3d(FP3a, FP3b, FP3c, FP3d, alpha = 0.5, color = "black")
#planes3d(FP2a, FP2b, FP2c, FP2d, alpha = 0.5, color = "blue")
#planes3d(FP1a, FP1b, FP1c, FP1d, alpha = 0.5, color = "red")
#planes3d(FPa, FPb, FPc, FPd, alpha = 0.5, color = "red")
#plot plane of best fit of footplate plane
#planes3d(FPa, FPb, FPc, FPd, alpha = 0.5, color = "blue")
####angle between TM and footplate PLANES####
#cos(angle) = abs(top/bottom)
#top <-(a1*a2)+(B1*B2)+(C1*C2)
#bottom<- sqrt((a1^2)+(b1^2)+(c1^2))*sqrt((a2^2)+(b2^2)+(c2^2))
TM_FP_top <-abs((TMa*FPa)+(TMb*FPb)+(TMc*FPc))
TM_FP_bottom<- sqrt((TMa^2)+(TMb^2)+(TMc^2))*sqrt((FPa^2)+(FPb^2)+(FPc^2))
TM_FP_cosangle<- TM_FP_top/TM_FP_bottom
angle_FP_TM<-acos(TM_FP_cosangle)*180/pi# convert radians to d
Y
FPa
coefsFP<- coef(fitFP1)
coefsFP
coef(fitFP2)
linepoints<-as.data.frame(read.fcsv(file.choose()))
one<-linepoints[1,]
two<-linepoints[2,]#fulcrum
three<-points[7,]
three<-linepoints[7,]
linedirection1_2<-as.data.frame(one-two)
linedirection3_2<-as.data.frame(three-two)
top<-abs((linedirection1_2[1,1]*linedirection3_2[1,1])+
as.numeric(linedirection1_2[1,2]*linedirection3_2[1,2])+
as.numeric(linedirection1_2[1,3]*linedirection3_2[1,3]))
bottom<- sqrt((linedirection1_2[1,1]^2)+(linedirection1_2[1,2]^2)+(linedirection1_2[1,3]^2))*
sqrt((linedirection3_2[1,1]^2)+(linedirection3_2[1,2]^2)+(linedirection3_2[1,3]^2))
cosangle<- abs(top/bottom)
angle_<-acos(cosangle)*180/pi
angle_
one<-linepoints[1,]
two<-linepoints[2,]#fulcrum
three<-linepoints[8,]
linedirection1_2<-as.data.frame(one-two)
linedirection3_2<-as.data.frame(three-two)
top<-abs((linedirection1_2[1,1]*linedirection3_2[1,1])+
as.numeric(linedirection1_2[1,2]*linedirection3_2[1,2])+
as.numeric(linedirection1_2[1,3]*linedirection3_2[1,3]))
bottom<- sqrt((linedirection1_2[1,1]^2)+(linedirection1_2[1,2]^2)+(linedirection1_2[1,3]^2))*
sqrt((linedirection3_2[1,1]^2)+(linedirection3_2[1,2]^2)+(linedirection3_2[1,3]^2))
cosangle<- abs(top/bottom)
angle_<-acos(cosangle)*180/pi
angle_
one<-linepoints[1,]
two<-linepoints[2,]#fulcrum
three<-linepoints[8,]
linedirection1_2<-as.data.frame(one-two)
linedirection3_2<-as.data.frame(three-two)
top<-(linedirection1_2[1,1]*linedirection3_2[1,1])+
as.numeric(linedirection1_2[1,2]*linedirection3_2[1,2])+
as.numeric(linedirection1_2[1,3]*linedirection3_2[1,3])
bottom<- sqrt((linedirection1_2[1,1]^2)+(linedirection1_2[1,2]^2)+(linedirection1_2[1,3]^2))*
sqrt((linedirection3_2[1,1]^2)+(linedirection3_2[1,2]^2)+(linedirection3_2[1,3]^2))
cosangle<- abs(top/bottom)
angle_<-acos(cosangle)*180/pi
angle_
one<-linepoints[1,]
two<-linepoints[2,]#fulcrum
three<-linepoints[7,]
linedirection1_2<-as.data.frame(one-two)
linedirection3_2<-as.data.frame(three-two)
top<-(linedirection1_2[1,1]*linedirection3_2[1,1])+
as.numeric(linedirection1_2[1,2]*linedirection3_2[1,2])+
as.numeric(linedirection1_2[1,3]*linedirection3_2[1,3])
bottom<- sqrt((linedirection1_2[1,1]^2)+(linedirection1_2[1,2]^2)+(linedirection1_2[1,3]^2))*
sqrt((linedirection3_2[1,1]^2)+(linedirection3_2[1,2]^2)+(linedirection3_2[1,3]^2))
cosangle<- abs(top/bottom)
angle_<-acos(cosangle)*180/pi
angle_
